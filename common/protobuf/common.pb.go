// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package common

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CHeartBeatReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CHeartBeatReq) Reset()         { *m = CHeartBeatReq{} }
func (m *CHeartBeatReq) String() string { return proto.CompactTextString(m) }
func (*CHeartBeatReq) ProtoMessage()    {}
func (*CHeartBeatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *CHeartBeatReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CHeartBeatReq.Unmarshal(m, b)
}
func (m *CHeartBeatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CHeartBeatReq.Marshal(b, m, deterministic)
}
func (m *CHeartBeatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CHeartBeatReq.Merge(m, src)
}
func (m *CHeartBeatReq) XXX_Size() int {
	return xxx_messageInfo_CHeartBeatReq.Size(m)
}
func (m *CHeartBeatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CHeartBeatReq.DiscardUnknown(m)
}

var xxx_messageInfo_CHeartBeatReq proto.InternalMessageInfo

func (m *CHeartBeatReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CHeartBeatRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CHeartBeatRsp) Reset()         { *m = CHeartBeatRsp{} }
func (m *CHeartBeatRsp) String() string { return proto.CompactTextString(m) }
func (*CHeartBeatRsp) ProtoMessage()    {}
func (*CHeartBeatRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *CHeartBeatRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CHeartBeatRsp.Unmarshal(m, b)
}
func (m *CHeartBeatRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CHeartBeatRsp.Marshal(b, m, deterministic)
}
func (m *CHeartBeatRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CHeartBeatRsp.Merge(m, src)
}
func (m *CHeartBeatRsp) XXX_Size() int {
	return xxx_messageInfo_CHeartBeatRsp.Size(m)
}
func (m *CHeartBeatRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CHeartBeatRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CHeartBeatRsp proto.InternalMessageInfo

//用户信息。现在没有认证流程，所以未认证相关信息
type CClientAuthInfo struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CClientAuthInfo) Reset()         { *m = CClientAuthInfo{} }
func (m *CClientAuthInfo) String() string { return proto.CompactTextString(m) }
func (*CClientAuthInfo) ProtoMessage()    {}
func (*CClientAuthInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *CClientAuthInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CClientAuthInfo.Unmarshal(m, b)
}
func (m *CClientAuthInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CClientAuthInfo.Marshal(b, m, deterministic)
}
func (m *CClientAuthInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CClientAuthInfo.Merge(m, src)
}
func (m *CClientAuthInfo) XXX_Size() int {
	return xxx_messageInfo_CClientAuthInfo.Size(m)
}
func (m *CClientAuthInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CClientAuthInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CClientAuthInfo proto.InternalMessageInfo

func (m *CClientAuthInfo) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//本次归宿frontSvr地址"ip:port"
type CFrontSvrAddr struct {
	//
	Addr                 string   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFrontSvrAddr) Reset()         { *m = CFrontSvrAddr{} }
func (m *CFrontSvrAddr) String() string { return proto.CompactTextString(m) }
func (*CFrontSvrAddr) ProtoMessage()    {}
func (*CFrontSvrAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

func (m *CFrontSvrAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFrontSvrAddr.Unmarshal(m, b)
}
func (m *CFrontSvrAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFrontSvrAddr.Marshal(b, m, deterministic)
}
func (m *CFrontSvrAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFrontSvrAddr.Merge(m, src)
}
func (m *CFrontSvrAddr) XXX_Size() int {
	return xxx_messageInfo_CFrontSvrAddr.Size(m)
}
func (m *CFrontSvrAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_CFrontSvrAddr.DiscardUnknown(m)
}

var xxx_messageInfo_CFrontSvrAddr proto.InternalMessageInfo

func (m *CFrontSvrAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

//本次归宿frontNotifySvr地址"ip:port"
type CFrontNotifySvrAddr struct {
	//
	Addr                 string   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFrontNotifySvrAddr) Reset()         { *m = CFrontNotifySvrAddr{} }
func (m *CFrontNotifySvrAddr) String() string { return proto.CompactTextString(m) }
func (*CFrontNotifySvrAddr) ProtoMessage()    {}
func (*CFrontNotifySvrAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

func (m *CFrontNotifySvrAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFrontNotifySvrAddr.Unmarshal(m, b)
}
func (m *CFrontNotifySvrAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFrontNotifySvrAddr.Marshal(b, m, deterministic)
}
func (m *CFrontNotifySvrAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFrontNotifySvrAddr.Merge(m, src)
}
func (m *CFrontNotifySvrAddr) XXX_Size() int {
	return xxx_messageInfo_CFrontNotifySvrAddr.Size(m)
}
func (m *CFrontNotifySvrAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_CFrontNotifySvrAddr.DiscardUnknown(m)
}

var xxx_messageInfo_CFrontNotifySvrAddr proto.InternalMessageInfo

func (m *CFrontNotifySvrAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

//拉取请求
type CPullReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	//上次获取到的最后一条微博的msgId，本次获取LastMsgId之前的。为0表示获取最新
	LastMsgId            int64    `protobuf:"varint,2,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPullReq) Reset()         { *m = CPullReq{} }
func (m *CPullReq) String() string { return proto.CompactTextString(m) }
func (*CPullReq) ProtoMessage()    {}
func (*CPullReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

func (m *CPullReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPullReq.Unmarshal(m, b)
}
func (m *CPullReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPullReq.Marshal(b, m, deterministic)
}
func (m *CPullReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPullReq.Merge(m, src)
}
func (m *CPullReq) XXX_Size() int {
	return xxx_messageInfo_CPullReq.Size(m)
}
func (m *CPullReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CPullReq.DiscardUnknown(m)
}

var xxx_messageInfo_CPullReq proto.InternalMessageInfo

func (m *CPullReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CPullReq) GetLastMsgId() int64 {
	if m != nil {
		return m.LastMsgId
	}
	return 0
}

type CPullRsp struct {
	MsgArr               []*MsgData `protobuf:"bytes,1,rep,name=MsgArr,proto3" json:"MsgArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CPullRsp) Reset()         { *m = CPullRsp{} }
func (m *CPullRsp) String() string { return proto.CompactTextString(m) }
func (*CPullRsp) ProtoMessage()    {}
func (*CPullRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

func (m *CPullRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPullRsp.Unmarshal(m, b)
}
func (m *CPullRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPullRsp.Marshal(b, m, deterministic)
}
func (m *CPullRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPullRsp.Merge(m, src)
}
func (m *CPullRsp) XXX_Size() int {
	return xxx_messageInfo_CPullRsp.Size(m)
}
func (m *CPullRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CPullRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CPullRsp proto.InternalMessageInfo

func (m *CPullRsp) GetMsgArr() []*MsgData {
	if m != nil {
		return m.MsgArr
	}
	return nil
}

//发布
type CPostReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	//
	Msg                  *MsgData `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPostReq) Reset()         { *m = CPostReq{} }
func (m *CPostReq) String() string { return proto.CompactTextString(m) }
func (*CPostReq) ProtoMessage()    {}
func (*CPostReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

func (m *CPostReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPostReq.Unmarshal(m, b)
}
func (m *CPostReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPostReq.Marshal(b, m, deterministic)
}
func (m *CPostReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPostReq.Merge(m, src)
}
func (m *CPostReq) XXX_Size() int {
	return xxx_messageInfo_CPostReq.Size(m)
}
func (m *CPostReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CPostReq.DiscardUnknown(m)
}

var xxx_messageInfo_CPostReq proto.InternalMessageInfo

func (m *CPostReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CPostReq) GetMsg() *MsgData {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CPostRsp struct {
	MsgId                int64    `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPostRsp) Reset()         { *m = CPostRsp{} }
func (m *CPostRsp) String() string { return proto.CompactTextString(m) }
func (*CPostRsp) ProtoMessage()    {}
func (*CPostRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

func (m *CPostRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPostRsp.Unmarshal(m, b)
}
func (m *CPostRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPostRsp.Marshal(b, m, deterministic)
}
func (m *CPostRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPostRsp.Merge(m, src)
}
func (m *CPostRsp) XXX_Size() int {
	return xxx_messageInfo_CPostRsp.Size(m)
}
func (m *CPostRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CPostRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CPostRsp proto.InternalMessageInfo

func (m *CPostRsp) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

//关注
type CFollowReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FollowedUserId       int64    `protobuf:"varint,2,opt,name=FollowedUserId,proto3" json:"FollowedUserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFollowReq) Reset()         { *m = CFollowReq{} }
func (m *CFollowReq) String() string { return proto.CompactTextString(m) }
func (*CFollowReq) ProtoMessage()    {}
func (*CFollowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}

func (m *CFollowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFollowReq.Unmarshal(m, b)
}
func (m *CFollowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFollowReq.Marshal(b, m, deterministic)
}
func (m *CFollowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFollowReq.Merge(m, src)
}
func (m *CFollowReq) XXX_Size() int {
	return xxx_messageInfo_CFollowReq.Size(m)
}
func (m *CFollowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CFollowReq.DiscardUnknown(m)
}

var xxx_messageInfo_CFollowReq proto.InternalMessageInfo

func (m *CFollowReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CFollowReq) GetFollowedUserId() int64 {
	if m != nil {
		return m.FollowedUserId
	}
	return 0
}

type CFollowRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CFollowRsp) Reset()         { *m = CFollowRsp{} }
func (m *CFollowRsp) String() string { return proto.CompactTextString(m) }
func (*CFollowRsp) ProtoMessage()    {}
func (*CFollowRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}

func (m *CFollowRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CFollowRsp.Unmarshal(m, b)
}
func (m *CFollowRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CFollowRsp.Marshal(b, m, deterministic)
}
func (m *CFollowRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CFollowRsp.Merge(m, src)
}
func (m *CFollowRsp) XXX_Size() int {
	return xxx_messageInfo_CFollowRsp.Size(m)
}
func (m *CFollowRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CFollowRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CFollowRsp proto.InternalMessageInfo

//取关
type CUnFollowReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UnFollowedUserId     int64    `protobuf:"varint,2,opt,name=UnFollowedUserId,proto3" json:"UnFollowedUserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CUnFollowReq) Reset()         { *m = CUnFollowReq{} }
func (m *CUnFollowReq) String() string { return proto.CompactTextString(m) }
func (*CUnFollowReq) ProtoMessage()    {}
func (*CUnFollowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}

func (m *CUnFollowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CUnFollowReq.Unmarshal(m, b)
}
func (m *CUnFollowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CUnFollowReq.Marshal(b, m, deterministic)
}
func (m *CUnFollowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CUnFollowReq.Merge(m, src)
}
func (m *CUnFollowReq) XXX_Size() int {
	return xxx_messageInfo_CUnFollowReq.Size(m)
}
func (m *CUnFollowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CUnFollowReq.DiscardUnknown(m)
}

var xxx_messageInfo_CUnFollowReq proto.InternalMessageInfo

func (m *CUnFollowReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CUnFollowReq) GetUnFollowedUserId() int64 {
	if m != nil {
		return m.UnFollowedUserId
	}
	return 0
}

type CUnFollowRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CUnFollowRsp) Reset()         { *m = CUnFollowRsp{} }
func (m *CUnFollowRsp) String() string { return proto.CompactTextString(m) }
func (*CUnFollowRsp) ProtoMessage()    {}
func (*CUnFollowRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}

func (m *CUnFollowRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CUnFollowRsp.Unmarshal(m, b)
}
func (m *CUnFollowRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CUnFollowRsp.Marshal(b, m, deterministic)
}
func (m *CUnFollowRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CUnFollowRsp.Merge(m, src)
}
func (m *CUnFollowRsp) XXX_Size() int {
	return xxx_messageInfo_CUnFollowRsp.Size(m)
}
func (m *CUnFollowRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CUnFollowRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CUnFollowRsp proto.InternalMessageInfo

//点赞
type CLikeReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLikeReq) Reset()         { *m = CLikeReq{} }
func (m *CLikeReq) String() string { return proto.CompactTextString(m) }
func (*CLikeReq) ProtoMessage()    {}
func (*CLikeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{13}
}

func (m *CLikeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLikeReq.Unmarshal(m, b)
}
func (m *CLikeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLikeReq.Marshal(b, m, deterministic)
}
func (m *CLikeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLikeReq.Merge(m, src)
}
func (m *CLikeReq) XXX_Size() int {
	return xxx_messageInfo_CLikeReq.Size(m)
}
func (m *CLikeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CLikeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CLikeReq proto.InternalMessageInfo

func (m *CLikeReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CLikeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type CLikeRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLikeRsp) Reset()         { *m = CLikeRsp{} }
func (m *CLikeRsp) String() string { return proto.CompactTextString(m) }
func (*CLikeRsp) ProtoMessage()    {}
func (*CLikeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{14}
}

func (m *CLikeRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLikeRsp.Unmarshal(m, b)
}
func (m *CLikeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLikeRsp.Marshal(b, m, deterministic)
}
func (m *CLikeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLikeRsp.Merge(m, src)
}
func (m *CLikeRsp) XXX_Size() int {
	return xxx_messageInfo_CLikeRsp.Size(m)
}
func (m *CLikeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CLikeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CLikeRsp proto.InternalMessageInfo

type COnlineReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *COnlineReq) Reset()         { *m = COnlineReq{} }
func (m *COnlineReq) String() string { return proto.CompactTextString(m) }
func (*COnlineReq) ProtoMessage()    {}
func (*COnlineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{15}
}

func (m *COnlineReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_COnlineReq.Unmarshal(m, b)
}
func (m *COnlineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_COnlineReq.Marshal(b, m, deterministic)
}
func (m *COnlineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_COnlineReq.Merge(m, src)
}
func (m *COnlineReq) XXX_Size() int {
	return xxx_messageInfo_COnlineReq.Size(m)
}
func (m *COnlineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_COnlineReq.DiscardUnknown(m)
}

var xxx_messageInfo_COnlineReq proto.InternalMessageInfo

func (m *COnlineReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type COnlineRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *COnlineRsp) Reset()         { *m = COnlineRsp{} }
func (m *COnlineRsp) String() string { return proto.CompactTextString(m) }
func (*COnlineRsp) ProtoMessage()    {}
func (*COnlineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{16}
}

func (m *COnlineRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_COnlineRsp.Unmarshal(m, b)
}
func (m *COnlineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_COnlineRsp.Marshal(b, m, deterministic)
}
func (m *COnlineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_COnlineRsp.Merge(m, src)
}
func (m *COnlineRsp) XXX_Size() int {
	return xxx_messageInfo_COnlineRsp.Size(m)
}
func (m *COnlineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_COnlineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_COnlineRsp proto.InternalMessageInfo

type COfflineReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *COfflineReq) Reset()         { *m = COfflineReq{} }
func (m *COfflineReq) String() string { return proto.CompactTextString(m) }
func (*COfflineReq) ProtoMessage()    {}
func (*COfflineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{17}
}

func (m *COfflineReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_COfflineReq.Unmarshal(m, b)
}
func (m *COfflineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_COfflineReq.Marshal(b, m, deterministic)
}
func (m *COfflineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_COfflineReq.Merge(m, src)
}
func (m *COfflineReq) XXX_Size() int {
	return xxx_messageInfo_COfflineReq.Size(m)
}
func (m *COfflineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_COfflineReq.DiscardUnknown(m)
}

var xxx_messageInfo_COfflineReq proto.InternalMessageInfo

func (m *COfflineReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type COfflineRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *COfflineRsp) Reset()         { *m = COfflineRsp{} }
func (m *COfflineRsp) String() string { return proto.CompactTextString(m) }
func (*COfflineRsp) ProtoMessage()    {}
func (*COfflineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{18}
}

func (m *COfflineRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_COfflineRsp.Unmarshal(m, b)
}
func (m *COfflineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_COfflineRsp.Marshal(b, m, deterministic)
}
func (m *COfflineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_COfflineRsp.Merge(m, src)
}
func (m *COfflineRsp) XXX_Size() int {
	return xxx_messageInfo_COfflineRsp.Size(m)
}
func (m *COfflineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_COfflineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_COfflineRsp proto.InternalMessageInfo

//
type FrontCheckAvailReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontCheckAvailReq) Reset()         { *m = FrontCheckAvailReq{} }
func (m *FrontCheckAvailReq) String() string { return proto.CompactTextString(m) }
func (*FrontCheckAvailReq) ProtoMessage()    {}
func (*FrontCheckAvailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{19}
}

func (m *FrontCheckAvailReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontCheckAvailReq.Unmarshal(m, b)
}
func (m *FrontCheckAvailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontCheckAvailReq.Marshal(b, m, deterministic)
}
func (m *FrontCheckAvailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontCheckAvailReq.Merge(m, src)
}
func (m *FrontCheckAvailReq) XXX_Size() int {
	return xxx_messageInfo_FrontCheckAvailReq.Size(m)
}
func (m *FrontCheckAvailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontCheckAvailReq.DiscardUnknown(m)
}

var xxx_messageInfo_FrontCheckAvailReq proto.InternalMessageInfo

type FrontCheckAvailRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontCheckAvailRsp) Reset()         { *m = FrontCheckAvailRsp{} }
func (m *FrontCheckAvailRsp) String() string { return proto.CompactTextString(m) }
func (*FrontCheckAvailRsp) ProtoMessage()    {}
func (*FrontCheckAvailRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{20}
}

func (m *FrontCheckAvailRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontCheckAvailRsp.Unmarshal(m, b)
}
func (m *FrontCheckAvailRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontCheckAvailRsp.Marshal(b, m, deterministic)
}
func (m *FrontCheckAvailRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontCheckAvailRsp.Merge(m, src)
}
func (m *FrontCheckAvailRsp) XXX_Size() int {
	return xxx_messageInfo_FrontCheckAvailRsp.Size(m)
}
func (m *FrontCheckAvailRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontCheckAvailRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FrontCheckAvailRsp proto.InternalMessageInfo

//
type FrontNotifyCheckAvailReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontNotifyCheckAvailReq) Reset()         { *m = FrontNotifyCheckAvailReq{} }
func (m *FrontNotifyCheckAvailReq) String() string { return proto.CompactTextString(m) }
func (*FrontNotifyCheckAvailReq) ProtoMessage()    {}
func (*FrontNotifyCheckAvailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{21}
}

func (m *FrontNotifyCheckAvailReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontNotifyCheckAvailReq.Unmarshal(m, b)
}
func (m *FrontNotifyCheckAvailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontNotifyCheckAvailReq.Marshal(b, m, deterministic)
}
func (m *FrontNotifyCheckAvailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontNotifyCheckAvailReq.Merge(m, src)
}
func (m *FrontNotifyCheckAvailReq) XXX_Size() int {
	return xxx_messageInfo_FrontNotifyCheckAvailReq.Size(m)
}
func (m *FrontNotifyCheckAvailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontNotifyCheckAvailReq.DiscardUnknown(m)
}

var xxx_messageInfo_FrontNotifyCheckAvailReq proto.InternalMessageInfo

type FrontNotifyCheckAvailRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontNotifyCheckAvailRsp) Reset()         { *m = FrontNotifyCheckAvailRsp{} }
func (m *FrontNotifyCheckAvailRsp) String() string { return proto.CompactTextString(m) }
func (*FrontNotifyCheckAvailRsp) ProtoMessage()    {}
func (*FrontNotifyCheckAvailRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{22}
}

func (m *FrontNotifyCheckAvailRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrontNotifyCheckAvailRsp.Unmarshal(m, b)
}
func (m *FrontNotifyCheckAvailRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrontNotifyCheckAvailRsp.Marshal(b, m, deterministic)
}
func (m *FrontNotifyCheckAvailRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontNotifyCheckAvailRsp.Merge(m, src)
}
func (m *FrontNotifyCheckAvailRsp) XXX_Size() int {
	return xxx_messageInfo_FrontNotifyCheckAvailRsp.Size(m)
}
func (m *FrontNotifyCheckAvailRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontNotifyCheckAvailRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FrontNotifyCheckAvailRsp proto.InternalMessageInfo

//
type QuerySvrAddrReq struct {
	LastRefreshTime      int64    `protobuf:"varint,1,opt,name=LastRefreshTime,proto3" json:"LastRefreshTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySvrAddrReq) Reset()         { *m = QuerySvrAddrReq{} }
func (m *QuerySvrAddrReq) String() string { return proto.CompactTextString(m) }
func (*QuerySvrAddrReq) ProtoMessage()    {}
func (*QuerySvrAddrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{23}
}

func (m *QuerySvrAddrReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySvrAddrReq.Unmarshal(m, b)
}
func (m *QuerySvrAddrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySvrAddrReq.Marshal(b, m, deterministic)
}
func (m *QuerySvrAddrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySvrAddrReq.Merge(m, src)
}
func (m *QuerySvrAddrReq) XXX_Size() int {
	return xxx_messageInfo_QuerySvrAddrReq.Size(m)
}
func (m *QuerySvrAddrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySvrAddrReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySvrAddrReq proto.InternalMessageInfo

func (m *QuerySvrAddrReq) GetLastRefreshTime() int64 {
	if m != nil {
		return m.LastRefreshTime
	}
	return 0
}

type QuerySvrAddrRsp struct {
	AnsTime              int64    `protobuf:"varint,1,opt,name=AnsTime,proto3" json:"AnsTime,omitempty"`
	NeedRefresh          bool     `protobuf:"varint,2,opt,name=NeedRefresh,proto3" json:"NeedRefresh,omitempty"`
	Addr                 string   `protobuf:"bytes,3,opt,name=Addr,proto3" json:"Addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySvrAddrRsp) Reset()         { *m = QuerySvrAddrRsp{} }
func (m *QuerySvrAddrRsp) String() string { return proto.CompactTextString(m) }
func (*QuerySvrAddrRsp) ProtoMessage()    {}
func (*QuerySvrAddrRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{24}
}

func (m *QuerySvrAddrRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySvrAddrRsp.Unmarshal(m, b)
}
func (m *QuerySvrAddrRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySvrAddrRsp.Marshal(b, m, deterministic)
}
func (m *QuerySvrAddrRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySvrAddrRsp.Merge(m, src)
}
func (m *QuerySvrAddrRsp) XXX_Size() int {
	return xxx_messageInfo_QuerySvrAddrRsp.Size(m)
}
func (m *QuerySvrAddrRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySvrAddrRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySvrAddrRsp proto.InternalMessageInfo

func (m *QuerySvrAddrRsp) GetAnsTime() int64 {
	if m != nil {
		return m.AnsTime
	}
	return 0
}

func (m *QuerySvrAddrRsp) GetNeedRefresh() bool {
	if m != nil {
		return m.NeedRefresh
	}
	return false
}

func (m *QuerySvrAddrRsp) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

//拉取请求
type PullReq struct {
	FrontReqId int64 `protobuf:"varint,1,opt,name=frontReqId,proto3" json:"frontReqId,omitempty"`
	UserId     int64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	//上次获取到的最后一条微博的msgId，本次获取LastMsgId之前的。为0表示获取最新
	LastMsgId            int64    `protobuf:"varint,3,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullReq) Reset()         { *m = PullReq{} }
func (m *PullReq) String() string { return proto.CompactTextString(m) }
func (*PullReq) ProtoMessage()    {}
func (*PullReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{25}
}

func (m *PullReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullReq.Unmarshal(m, b)
}
func (m *PullReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullReq.Marshal(b, m, deterministic)
}
func (m *PullReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullReq.Merge(m, src)
}
func (m *PullReq) XXX_Size() int {
	return xxx_messageInfo_PullReq.Size(m)
}
func (m *PullReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PullReq.DiscardUnknown(m)
}

var xxx_messageInfo_PullReq proto.InternalMessageInfo

func (m *PullReq) GetFrontReqId() int64 {
	if m != nil {
		return m.FrontReqId
	}
	return 0
}

func (m *PullReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PullReq) GetLastMsgId() int64 {
	if m != nil {
		return m.LastMsgId
	}
	return 0
}

type MsgData struct {
	MsgId  int64 `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	//
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ImgUrlArr            []string `protobuf:"bytes,4,rep,name=imgUrlArr,proto3" json:"imgUrlArr,omitempty"`
	VideoUrl             string   `protobuf:"bytes,5,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgData) Reset()         { *m = MsgData{} }
func (m *MsgData) String() string { return proto.CompactTextString(m) }
func (*MsgData) ProtoMessage()    {}
func (*MsgData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{26}
}

func (m *MsgData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgData.Unmarshal(m, b)
}
func (m *MsgData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgData.Marshal(b, m, deterministic)
}
func (m *MsgData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgData.Merge(m, src)
}
func (m *MsgData) XXX_Size() int {
	return xxx_messageInfo_MsgData.Size(m)
}
func (m *MsgData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgData proto.InternalMessageInfo

func (m *MsgData) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *MsgData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MsgData) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgData) GetImgUrlArr() []string {
	if m != nil {
		return m.ImgUrlArr
	}
	return nil
}

func (m *MsgData) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

type PullRsp struct {
	FrontReqId           int64      `protobuf:"varint,1,opt,name=frontReqId,proto3" json:"frontReqId,omitempty"`
	MsgArr               []*MsgData `protobuf:"bytes,2,rep,name=MsgArr,proto3" json:"MsgArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PullRsp) Reset()         { *m = PullRsp{} }
func (m *PullRsp) String() string { return proto.CompactTextString(m) }
func (*PullRsp) ProtoMessage()    {}
func (*PullRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{27}
}

func (m *PullRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullRsp.Unmarshal(m, b)
}
func (m *PullRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullRsp.Marshal(b, m, deterministic)
}
func (m *PullRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRsp.Merge(m, src)
}
func (m *PullRsp) XXX_Size() int {
	return xxx_messageInfo_PullRsp.Size(m)
}
func (m *PullRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PullRsp proto.InternalMessageInfo

func (m *PullRsp) GetFrontReqId() int64 {
	if m != nil {
		return m.FrontReqId
	}
	return 0
}

func (m *PullRsp) GetMsgArr() []*MsgData {
	if m != nil {
		return m.MsgArr
	}
	return nil
}

type QueryFollowListReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFollowListReq) Reset()         { *m = QueryFollowListReq{} }
func (m *QueryFollowListReq) String() string { return proto.CompactTextString(m) }
func (*QueryFollowListReq) ProtoMessage()    {}
func (*QueryFollowListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{28}
}

func (m *QueryFollowListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryFollowListReq.Unmarshal(m, b)
}
func (m *QueryFollowListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryFollowListReq.Marshal(b, m, deterministic)
}
func (m *QueryFollowListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFollowListReq.Merge(m, src)
}
func (m *QueryFollowListReq) XXX_Size() int {
	return xxx_messageInfo_QueryFollowListReq.Size(m)
}
func (m *QueryFollowListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFollowListReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFollowListReq proto.InternalMessageInfo

func (m *QueryFollowListReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type QueryFollowListRsp struct {
	FollowIdArr          []int64  `protobuf:"varint,1,rep,packed,name=FollowIdArr,proto3" json:"FollowIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFollowListRsp) Reset()         { *m = QueryFollowListRsp{} }
func (m *QueryFollowListRsp) String() string { return proto.CompactTextString(m) }
func (*QueryFollowListRsp) ProtoMessage()    {}
func (*QueryFollowListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{29}
}

func (m *QueryFollowListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryFollowListRsp.Unmarshal(m, b)
}
func (m *QueryFollowListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryFollowListRsp.Marshal(b, m, deterministic)
}
func (m *QueryFollowListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFollowListRsp.Merge(m, src)
}
func (m *QueryFollowListRsp) XXX_Size() int {
	return xxx_messageInfo_QueryFollowListRsp.Size(m)
}
func (m *QueryFollowListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFollowListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFollowListRsp proto.InternalMessageInfo

func (m *QueryFollowListRsp) GetFollowIdArr() []int64 {
	if m != nil {
		return m.FollowIdArr
	}
	return nil
}

type QueryFollowedListReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFollowedListReq) Reset()         { *m = QueryFollowedListReq{} }
func (m *QueryFollowedListReq) String() string { return proto.CompactTextString(m) }
func (*QueryFollowedListReq) ProtoMessage()    {}
func (*QueryFollowedListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{30}
}

func (m *QueryFollowedListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryFollowedListReq.Unmarshal(m, b)
}
func (m *QueryFollowedListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryFollowedListReq.Marshal(b, m, deterministic)
}
func (m *QueryFollowedListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFollowedListReq.Merge(m, src)
}
func (m *QueryFollowedListReq) XXX_Size() int {
	return xxx_messageInfo_QueryFollowedListReq.Size(m)
}
func (m *QueryFollowedListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFollowedListReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFollowedListReq proto.InternalMessageInfo

func (m *QueryFollowedListReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type QueryFollowedListRsp struct {
	FollowedIdArr        []int64  `protobuf:"varint,1,rep,packed,name=FollowedIdArr,proto3" json:"FollowedIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryFollowedListRsp) Reset()         { *m = QueryFollowedListRsp{} }
func (m *QueryFollowedListRsp) String() string { return proto.CompactTextString(m) }
func (*QueryFollowedListRsp) ProtoMessage()    {}
func (*QueryFollowedListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{31}
}

func (m *QueryFollowedListRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryFollowedListRsp.Unmarshal(m, b)
}
func (m *QueryFollowedListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryFollowedListRsp.Marshal(b, m, deterministic)
}
func (m *QueryFollowedListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFollowedListRsp.Merge(m, src)
}
func (m *QueryFollowedListRsp) XXX_Size() int {
	return xxx_messageInfo_QueryFollowedListRsp.Size(m)
}
func (m *QueryFollowedListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFollowedListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFollowedListRsp proto.InternalMessageInfo

func (m *QueryFollowedListRsp) GetFollowedIdArr() []int64 {
	if m != nil {
		return m.FollowedIdArr
	}
	return nil
}

type FollowReq struct {
	UserId               int64    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FollowedUserId       int64    `protobuf:"varint,3,opt,name=FollowedUserId,proto3" json:"FollowedUserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowReq) Reset()         { *m = FollowReq{} }
func (m *FollowReq) String() string { return proto.CompactTextString(m) }
func (*FollowReq) ProtoMessage()    {}
func (*FollowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{32}
}

func (m *FollowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FollowReq.Unmarshal(m, b)
}
func (m *FollowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FollowReq.Marshal(b, m, deterministic)
}
func (m *FollowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowReq.Merge(m, src)
}
func (m *FollowReq) XXX_Size() int {
	return xxx_messageInfo_FollowReq.Size(m)
}
func (m *FollowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowReq.DiscardUnknown(m)
}

var xxx_messageInfo_FollowReq proto.InternalMessageInfo

func (m *FollowReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FollowReq) GetFollowedUserId() int64 {
	if m != nil {
		return m.FollowedUserId
	}
	return 0
}

type FollowRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowRsp) Reset()         { *m = FollowRsp{} }
func (m *FollowRsp) String() string { return proto.CompactTextString(m) }
func (*FollowRsp) ProtoMessage()    {}
func (*FollowRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{33}
}

func (m *FollowRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FollowRsp.Unmarshal(m, b)
}
func (m *FollowRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FollowRsp.Marshal(b, m, deterministic)
}
func (m *FollowRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowRsp.Merge(m, src)
}
func (m *FollowRsp) XXX_Size() int {
	return xxx_messageInfo_FollowRsp.Size(m)
}
func (m *FollowRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FollowRsp proto.InternalMessageInfo

type UnFollowReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UnFollowedUserId     int64    `protobuf:"varint,2,opt,name=UnFollowedUserId,proto3" json:"UnFollowedUserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnFollowReq) Reset()         { *m = UnFollowReq{} }
func (m *UnFollowReq) String() string { return proto.CompactTextString(m) }
func (*UnFollowReq) ProtoMessage()    {}
func (*UnFollowReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{34}
}

func (m *UnFollowReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnFollowReq.Unmarshal(m, b)
}
func (m *UnFollowReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnFollowReq.Marshal(b, m, deterministic)
}
func (m *UnFollowReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnFollowReq.Merge(m, src)
}
func (m *UnFollowReq) XXX_Size() int {
	return xxx_messageInfo_UnFollowReq.Size(m)
}
func (m *UnFollowReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnFollowReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnFollowReq proto.InternalMessageInfo

func (m *UnFollowReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UnFollowReq) GetUnFollowedUserId() int64 {
	if m != nil {
		return m.UnFollowedUserId
	}
	return 0
}

type UnFollowRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnFollowRsp) Reset()         { *m = UnFollowRsp{} }
func (m *UnFollowRsp) String() string { return proto.CompactTextString(m) }
func (*UnFollowRsp) ProtoMessage()    {}
func (*UnFollowRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{35}
}

func (m *UnFollowRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnFollowRsp.Unmarshal(m, b)
}
func (m *UnFollowRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnFollowRsp.Marshal(b, m, deterministic)
}
func (m *UnFollowRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnFollowRsp.Merge(m, src)
}
func (m *UnFollowRsp) XXX_Size() int {
	return xxx_messageInfo_UnFollowRsp.Size(m)
}
func (m *UnFollowRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UnFollowRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UnFollowRsp proto.InternalMessageInfo

type NewUserReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewUserReq) Reset()         { *m = NewUserReq{} }
func (m *NewUserReq) String() string { return proto.CompactTextString(m) }
func (*NewUserReq) ProtoMessage()    {}
func (*NewUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{36}
}

func (m *NewUserReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewUserReq.Unmarshal(m, b)
}
func (m *NewUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewUserReq.Marshal(b, m, deterministic)
}
func (m *NewUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewUserReq.Merge(m, src)
}
func (m *NewUserReq) XXX_Size() int {
	return xxx_messageInfo_NewUserReq.Size(m)
}
func (m *NewUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewUserReq proto.InternalMessageInfo

func (m *NewUserReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type NewUserRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewUserRsp) Reset()         { *m = NewUserRsp{} }
func (m *NewUserRsp) String() string { return proto.CompactTextString(m) }
func (*NewUserRsp) ProtoMessage()    {}
func (*NewUserRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{37}
}

func (m *NewUserRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewUserRsp.Unmarshal(m, b)
}
func (m *NewUserRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewUserRsp.Marshal(b, m, deterministic)
}
func (m *NewUserRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewUserRsp.Merge(m, src)
}
func (m *NewUserRsp) XXX_Size() int {
	return xxx_messageInfo_NewUserRsp.Size(m)
}
func (m *NewUserRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewUserRsp.DiscardUnknown(m)
}

var xxx_messageInfo_NewUserRsp proto.InternalMessageInfo

type PostReq struct {
	FrontReqId           int64    `protobuf:"varint,1,opt,name=frontReqId,proto3" json:"frontReqId,omitempty"`
	Content              *MsgData `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostReq) Reset()         { *m = PostReq{} }
func (m *PostReq) String() string { return proto.CompactTextString(m) }
func (*PostReq) ProtoMessage()    {}
func (*PostReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{38}
}

func (m *PostReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostReq.Unmarshal(m, b)
}
func (m *PostReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostReq.Marshal(b, m, deterministic)
}
func (m *PostReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostReq.Merge(m, src)
}
func (m *PostReq) XXX_Size() int {
	return xxx_messageInfo_PostReq.Size(m)
}
func (m *PostReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PostReq.DiscardUnknown(m)
}

var xxx_messageInfo_PostReq proto.InternalMessageInfo

func (m *PostReq) GetFrontReqId() int64 {
	if m != nil {
		return m.FrontReqId
	}
	return 0
}

func (m *PostReq) GetContent() *MsgData {
	if m != nil {
		return m.Content
	}
	return nil
}

type PostRsp struct {
	FrontReqId           int64    `protobuf:"varint,1,opt,name=frontReqId,proto3" json:"frontReqId,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId                int64    `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostRsp) Reset()         { *m = PostRsp{} }
func (m *PostRsp) String() string { return proto.CompactTextString(m) }
func (*PostRsp) ProtoMessage()    {}
func (*PostRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{39}
}

func (m *PostRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostRsp.Unmarshal(m, b)
}
func (m *PostRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostRsp.Marshal(b, m, deterministic)
}
func (m *PostRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostRsp.Merge(m, src)
}
func (m *PostRsp) XXX_Size() int {
	return xxx_messageInfo_PostRsp.Size(m)
}
func (m *PostRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PostRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PostRsp proto.InternalMessageInfo

func (m *PostRsp) GetFrontReqId() int64 {
	if m != nil {
		return m.FrontReqId
	}
	return 0
}

func (m *PostRsp) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PostRsp) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type GenMsgIdReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenMsgIdReq) Reset()         { *m = GenMsgIdReq{} }
func (m *GenMsgIdReq) String() string { return proto.CompactTextString(m) }
func (*GenMsgIdReq) ProtoMessage()    {}
func (*GenMsgIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{40}
}

func (m *GenMsgIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenMsgIdReq.Unmarshal(m, b)
}
func (m *GenMsgIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenMsgIdReq.Marshal(b, m, deterministic)
}
func (m *GenMsgIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenMsgIdReq.Merge(m, src)
}
func (m *GenMsgIdReq) XXX_Size() int {
	return xxx_messageInfo_GenMsgIdReq.Size(m)
}
func (m *GenMsgIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GenMsgIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GenMsgIdReq proto.InternalMessageInfo

type GenMsgIdRsp struct {
	MsgId                int64    `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenMsgIdRsp) Reset()         { *m = GenMsgIdRsp{} }
func (m *GenMsgIdRsp) String() string { return proto.CompactTextString(m) }
func (*GenMsgIdRsp) ProtoMessage()    {}
func (*GenMsgIdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{41}
}

func (m *GenMsgIdRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenMsgIdRsp.Unmarshal(m, b)
}
func (m *GenMsgIdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenMsgIdRsp.Marshal(b, m, deterministic)
}
func (m *GenMsgIdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenMsgIdRsp.Merge(m, src)
}
func (m *GenMsgIdRsp) XXX_Size() int {
	return xxx_messageInfo_GenMsgIdRsp.Size(m)
}
func (m *GenMsgIdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GenMsgIdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GenMsgIdRsp proto.InternalMessageInfo

func (m *GenMsgIdRsp) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type QueryUserMsgIdSvrAddrReq struct {
	UserIdArr            []int64  `protobuf:"varint,1,rep,packed,name=UserIdArr,proto3" json:"UserIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryUserMsgIdSvrAddrReq) Reset()         { *m = QueryUserMsgIdSvrAddrReq{} }
func (m *QueryUserMsgIdSvrAddrReq) String() string { return proto.CompactTextString(m) }
func (*QueryUserMsgIdSvrAddrReq) ProtoMessage()    {}
func (*QueryUserMsgIdSvrAddrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{42}
}

func (m *QueryUserMsgIdSvrAddrReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryUserMsgIdSvrAddrReq.Unmarshal(m, b)
}
func (m *QueryUserMsgIdSvrAddrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryUserMsgIdSvrAddrReq.Marshal(b, m, deterministic)
}
func (m *QueryUserMsgIdSvrAddrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserMsgIdSvrAddrReq.Merge(m, src)
}
func (m *QueryUserMsgIdSvrAddrReq) XXX_Size() int {
	return xxx_messageInfo_QueryUserMsgIdSvrAddrReq.Size(m)
}
func (m *QueryUserMsgIdSvrAddrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserMsgIdSvrAddrReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserMsgIdSvrAddrReq proto.InternalMessageInfo

func (m *QueryUserMsgIdSvrAddrReq) GetUserIdArr() []int64 {
	if m != nil {
		return m.UserIdArr
	}
	return nil
}

type MsgIdSvrAddrAndUserId struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	UserIdArr            []int64  `protobuf:"varint,2,rep,packed,name=UserIdArr,proto3" json:"UserIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgIdSvrAddrAndUserId) Reset()         { *m = MsgIdSvrAddrAndUserId{} }
func (m *MsgIdSvrAddrAndUserId) String() string { return proto.CompactTextString(m) }
func (*MsgIdSvrAddrAndUserId) ProtoMessage()    {}
func (*MsgIdSvrAddrAndUserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{43}
}

func (m *MsgIdSvrAddrAndUserId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgIdSvrAddrAndUserId.Unmarshal(m, b)
}
func (m *MsgIdSvrAddrAndUserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgIdSvrAddrAndUserId.Marshal(b, m, deterministic)
}
func (m *MsgIdSvrAddrAndUserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIdSvrAddrAndUserId.Merge(m, src)
}
func (m *MsgIdSvrAddrAndUserId) XXX_Size() int {
	return xxx_messageInfo_MsgIdSvrAddrAndUserId.Size(m)
}
func (m *MsgIdSvrAddrAndUserId) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIdSvrAddrAndUserId.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIdSvrAddrAndUserId proto.InternalMessageInfo

func (m *MsgIdSvrAddrAndUserId) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *MsgIdSvrAddrAndUserId) GetUserIdArr() []int64 {
	if m != nil {
		return m.UserIdArr
	}
	return nil
}

type QueryUserMsgIdSvrAddrRsp struct {
	DataArr              []*MsgIdSvrAddrAndUserId `protobuf:"bytes,1,rep,name=DataArr,proto3" json:"DataArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *QueryUserMsgIdSvrAddrRsp) Reset()         { *m = QueryUserMsgIdSvrAddrRsp{} }
func (m *QueryUserMsgIdSvrAddrRsp) String() string { return proto.CompactTextString(m) }
func (*QueryUserMsgIdSvrAddrRsp) ProtoMessage()    {}
func (*QueryUserMsgIdSvrAddrRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{44}
}

func (m *QueryUserMsgIdSvrAddrRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryUserMsgIdSvrAddrRsp.Unmarshal(m, b)
}
func (m *QueryUserMsgIdSvrAddrRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryUserMsgIdSvrAddrRsp.Marshal(b, m, deterministic)
}
func (m *QueryUserMsgIdSvrAddrRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserMsgIdSvrAddrRsp.Merge(m, src)
}
func (m *QueryUserMsgIdSvrAddrRsp) XXX_Size() int {
	return xxx_messageInfo_QueryUserMsgIdSvrAddrRsp.Size(m)
}
func (m *QueryUserMsgIdSvrAddrRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserMsgIdSvrAddrRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserMsgIdSvrAddrRsp proto.InternalMessageInfo

func (m *QueryUserMsgIdSvrAddrRsp) GetDataArr() []*MsgIdSvrAddrAndUserId {
	if m != nil {
		return m.DataArr
	}
	return nil
}

type PullMsgReq struct {
	UserIdArr            []int64  `protobuf:"varint,1,rep,packed,name=UserIdArr,proto3" json:"UserIdArr,omitempty"`
	LastMsgId            int64    `protobuf:"varint,2,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullMsgReq) Reset()         { *m = PullMsgReq{} }
func (m *PullMsgReq) String() string { return proto.CompactTextString(m) }
func (*PullMsgReq) ProtoMessage()    {}
func (*PullMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{45}
}

func (m *PullMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMsgReq.Unmarshal(m, b)
}
func (m *PullMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMsgReq.Marshal(b, m, deterministic)
}
func (m *PullMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMsgReq.Merge(m, src)
}
func (m *PullMsgReq) XXX_Size() int {
	return xxx_messageInfo_PullMsgReq.Size(m)
}
func (m *PullMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_PullMsgReq proto.InternalMessageInfo

func (m *PullMsgReq) GetUserIdArr() []int64 {
	if m != nil {
		return m.UserIdArr
	}
	return nil
}

func (m *PullMsgReq) GetLastMsgId() int64 {
	if m != nil {
		return m.LastMsgId
	}
	return 0
}

type PullMsgRsp struct {
	MsgArr               []*MsgData `protobuf:"bytes,1,rep,name=MsgArr,proto3" json:"MsgArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PullMsgRsp) Reset()         { *m = PullMsgRsp{} }
func (m *PullMsgRsp) String() string { return proto.CompactTextString(m) }
func (*PullMsgRsp) ProtoMessage()    {}
func (*PullMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{46}
}

func (m *PullMsgRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMsgRsp.Unmarshal(m, b)
}
func (m *PullMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMsgRsp.Marshal(b, m, deterministic)
}
func (m *PullMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMsgRsp.Merge(m, src)
}
func (m *PullMsgRsp) XXX_Size() int {
	return xxx_messageInfo_PullMsgRsp.Size(m)
}
func (m *PullMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PullMsgRsp proto.InternalMessageInfo

func (m *PullMsgRsp) GetMsgArr() []*MsgData {
	if m != nil {
		return m.MsgArr
	}
	return nil
}

type PullMsgIdReq struct {
	UserIdArr            []int64  `protobuf:"varint,1,rep,packed,name=UserIdArr,proto3" json:"UserIdArr,omitempty"`
	LastMsgId            int64    `protobuf:"varint,2,opt,name=LastMsgId,proto3" json:"LastMsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullMsgIdReq) Reset()         { *m = PullMsgIdReq{} }
func (m *PullMsgIdReq) String() string { return proto.CompactTextString(m) }
func (*PullMsgIdReq) ProtoMessage()    {}
func (*PullMsgIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{47}
}

func (m *PullMsgIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMsgIdReq.Unmarshal(m, b)
}
func (m *PullMsgIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMsgIdReq.Marshal(b, m, deterministic)
}
func (m *PullMsgIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMsgIdReq.Merge(m, src)
}
func (m *PullMsgIdReq) XXX_Size() int {
	return xxx_messageInfo_PullMsgIdReq.Size(m)
}
func (m *PullMsgIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMsgIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_PullMsgIdReq proto.InternalMessageInfo

func (m *PullMsgIdReq) GetUserIdArr() []int64 {
	if m != nil {
		return m.UserIdArr
	}
	return nil
}

func (m *PullMsgIdReq) GetLastMsgId() int64 {
	if m != nil {
		return m.LastMsgId
	}
	return 0
}

type PullMsgIdRsp struct {
	MsgIdArr             []int64  `protobuf:"varint,1,rep,packed,name=MsgIdArr,proto3" json:"MsgIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullMsgIdRsp) Reset()         { *m = PullMsgIdRsp{} }
func (m *PullMsgIdRsp) String() string { return proto.CompactTextString(m) }
func (*PullMsgIdRsp) ProtoMessage()    {}
func (*PullMsgIdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{48}
}

func (m *PullMsgIdRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMsgIdRsp.Unmarshal(m, b)
}
func (m *PullMsgIdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMsgIdRsp.Marshal(b, m, deterministic)
}
func (m *PullMsgIdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMsgIdRsp.Merge(m, src)
}
func (m *PullMsgIdRsp) XXX_Size() int {
	return xxx_messageInfo_PullMsgIdRsp.Size(m)
}
func (m *PullMsgIdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMsgIdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PullMsgIdRsp proto.InternalMessageInfo

func (m *PullMsgIdRsp) GetMsgIdArr() []int64 {
	if m != nil {
		return m.MsgIdArr
	}
	return nil
}

type PostMsgIdReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostMsgIdReq) Reset()         { *m = PostMsgIdReq{} }
func (m *PostMsgIdReq) String() string { return proto.CompactTextString(m) }
func (*PostMsgIdReq) ProtoMessage()    {}
func (*PostMsgIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{49}
}

func (m *PostMsgIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostMsgIdReq.Unmarshal(m, b)
}
func (m *PostMsgIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostMsgIdReq.Marshal(b, m, deterministic)
}
func (m *PostMsgIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostMsgIdReq.Merge(m, src)
}
func (m *PostMsgIdReq) XXX_Size() int {
	return xxx_messageInfo_PostMsgIdReq.Size(m)
}
func (m *PostMsgIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PostMsgIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_PostMsgIdReq proto.InternalMessageInfo

func (m *PostMsgIdReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PostMsgIdReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type PostMsgIdRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostMsgIdRsp) Reset()         { *m = PostMsgIdRsp{} }
func (m *PostMsgIdRsp) String() string { return proto.CompactTextString(m) }
func (*PostMsgIdRsp) ProtoMessage()    {}
func (*PostMsgIdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{50}
}

func (m *PostMsgIdRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostMsgIdRsp.Unmarshal(m, b)
}
func (m *PostMsgIdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostMsgIdRsp.Marshal(b, m, deterministic)
}
func (m *PostMsgIdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostMsgIdRsp.Merge(m, src)
}
func (m *PostMsgIdRsp) XXX_Size() int {
	return xxx_messageInfo_PostMsgIdRsp.Size(m)
}
func (m *PostMsgIdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PostMsgIdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PostMsgIdRsp proto.InternalMessageInfo

type DeleteMsgReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMsgReq) Reset()         { *m = DeleteMsgReq{} }
func (m *DeleteMsgReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMsgReq) ProtoMessage()    {}
func (*DeleteMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{51}
}

func (m *DeleteMsgReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMsgReq.Unmarshal(m, b)
}
func (m *DeleteMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMsgReq.Marshal(b, m, deterministic)
}
func (m *DeleteMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMsgReq.Merge(m, src)
}
func (m *DeleteMsgReq) XXX_Size() int {
	return xxx_messageInfo_DeleteMsgReq.Size(m)
}
func (m *DeleteMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMsgReq proto.InternalMessageInfo

func (m *DeleteMsgReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteMsgReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type DeleteMsgRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMsgRsp) Reset()         { *m = DeleteMsgRsp{} }
func (m *DeleteMsgRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteMsgRsp) ProtoMessage()    {}
func (*DeleteMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{52}
}

func (m *DeleteMsgRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMsgRsp.Unmarshal(m, b)
}
func (m *DeleteMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMsgRsp.Marshal(b, m, deterministic)
}
func (m *DeleteMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMsgRsp.Merge(m, src)
}
func (m *DeleteMsgRsp) XXX_Size() int {
	return xxx_messageInfo_DeleteMsgRsp.Size(m)
}
func (m *DeleteMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMsgRsp proto.InternalMessageInfo

type PullMsgContentReq struct {
	MsgIdArr             []int64  `protobuf:"varint,1,rep,packed,name=msgIdArr,proto3" json:"msgIdArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullMsgContentReq) Reset()         { *m = PullMsgContentReq{} }
func (m *PullMsgContentReq) String() string { return proto.CompactTextString(m) }
func (*PullMsgContentReq) ProtoMessage()    {}
func (*PullMsgContentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{53}
}

func (m *PullMsgContentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMsgContentReq.Unmarshal(m, b)
}
func (m *PullMsgContentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMsgContentReq.Marshal(b, m, deterministic)
}
func (m *PullMsgContentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMsgContentReq.Merge(m, src)
}
func (m *PullMsgContentReq) XXX_Size() int {
	return xxx_messageInfo_PullMsgContentReq.Size(m)
}
func (m *PullMsgContentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMsgContentReq.DiscardUnknown(m)
}

var xxx_messageInfo_PullMsgContentReq proto.InternalMessageInfo

func (m *PullMsgContentReq) GetMsgIdArr() []int64 {
	if m != nil {
		return m.MsgIdArr
	}
	return nil
}

type PullMsgContentRsp struct {
	MsgArr               []*MsgData `protobuf:"bytes,1,rep,name=MsgArr,proto3" json:"MsgArr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PullMsgContentRsp) Reset()         { *m = PullMsgContentRsp{} }
func (m *PullMsgContentRsp) String() string { return proto.CompactTextString(m) }
func (*PullMsgContentRsp) ProtoMessage()    {}
func (*PullMsgContentRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{54}
}

func (m *PullMsgContentRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullMsgContentRsp.Unmarshal(m, b)
}
func (m *PullMsgContentRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullMsgContentRsp.Marshal(b, m, deterministic)
}
func (m *PullMsgContentRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullMsgContentRsp.Merge(m, src)
}
func (m *PullMsgContentRsp) XXX_Size() int {
	return xxx_messageInfo_PullMsgContentRsp.Size(m)
}
func (m *PullMsgContentRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PullMsgContentRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PullMsgContentRsp proto.InternalMessageInfo

func (m *PullMsgContentRsp) GetMsgArr() []*MsgData {
	if m != nil {
		return m.MsgArr
	}
	return nil
}

type PostMsgContentReq struct {
	Content              *MsgData `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostMsgContentReq) Reset()         { *m = PostMsgContentReq{} }
func (m *PostMsgContentReq) String() string { return proto.CompactTextString(m) }
func (*PostMsgContentReq) ProtoMessage()    {}
func (*PostMsgContentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{55}
}

func (m *PostMsgContentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostMsgContentReq.Unmarshal(m, b)
}
func (m *PostMsgContentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostMsgContentReq.Marshal(b, m, deterministic)
}
func (m *PostMsgContentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostMsgContentReq.Merge(m, src)
}
func (m *PostMsgContentReq) XXX_Size() int {
	return xxx_messageInfo_PostMsgContentReq.Size(m)
}
func (m *PostMsgContentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PostMsgContentReq.DiscardUnknown(m)
}

var xxx_messageInfo_PostMsgContentReq proto.InternalMessageInfo

func (m *PostMsgContentReq) GetContent() *MsgData {
	if m != nil {
		return m.Content
	}
	return nil
}

type PostMsgContentRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostMsgContentRsp) Reset()         { *m = PostMsgContentRsp{} }
func (m *PostMsgContentRsp) String() string { return proto.CompactTextString(m) }
func (*PostMsgContentRsp) ProtoMessage()    {}
func (*PostMsgContentRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{56}
}

func (m *PostMsgContentRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostMsgContentRsp.Unmarshal(m, b)
}
func (m *PostMsgContentRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostMsgContentRsp.Marshal(b, m, deterministic)
}
func (m *PostMsgContentRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostMsgContentRsp.Merge(m, src)
}
func (m *PostMsgContentRsp) XXX_Size() int {
	return xxx_messageInfo_PostMsgContentRsp.Size(m)
}
func (m *PostMsgContentRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PostMsgContentRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PostMsgContentRsp proto.InternalMessageInfo

type PushReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushReq) Reset()         { *m = PushReq{} }
func (m *PushReq) String() string { return proto.CompactTextString(m) }
func (*PushReq) ProtoMessage()    {}
func (*PushReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{57}
}

func (m *PushReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushReq.Unmarshal(m, b)
}
func (m *PushReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushReq.Marshal(b, m, deterministic)
}
func (m *PushReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReq.Merge(m, src)
}
func (m *PushReq) XXX_Size() int {
	return xxx_messageInfo_PushReq.Size(m)
}
func (m *PushReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReq.DiscardUnknown(m)
}

var xxx_messageInfo_PushReq proto.InternalMessageInfo

func (m *PushReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PushReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type PushRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRsp) Reset()         { *m = PushRsp{} }
func (m *PushRsp) String() string { return proto.CompactTextString(m) }
func (*PushRsp) ProtoMessage()    {}
func (*PushRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{58}
}

func (m *PushRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRsp.Unmarshal(m, b)
}
func (m *PushRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRsp.Marshal(b, m, deterministic)
}
func (m *PushRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRsp.Merge(m, src)
}
func (m *PushRsp) XXX_Size() int {
	return xxx_messageInfo_PushRsp.Size(m)
}
func (m *PushRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PushRsp proto.InternalMessageInfo

type PushByeRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushByeRsp) Reset()         { *m = PushByeRsp{} }
func (m *PushByeRsp) String() string { return proto.CompactTextString(m) }
func (*PushByeRsp) ProtoMessage()    {}
func (*PushByeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{59}
}

func (m *PushByeRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushByeRsp.Unmarshal(m, b)
}
func (m *PushByeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushByeRsp.Marshal(b, m, deterministic)
}
func (m *PushByeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushByeRsp.Merge(m, src)
}
func (m *PushByeRsp) XXX_Size() int {
	return xxx_messageInfo_PushByeRsp.Size(m)
}
func (m *PushByeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PushByeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PushByeRsp proto.InternalMessageInfo

type OnlineReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	FrontNotifySvrId     int32    `protobuf:"varint,2,opt,name=FrontNotifySvrId,proto3" json:"FrontNotifySvrId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnlineReq) Reset()         { *m = OnlineReq{} }
func (m *OnlineReq) String() string { return proto.CompactTextString(m) }
func (*OnlineReq) ProtoMessage()    {}
func (*OnlineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{60}
}

func (m *OnlineReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnlineReq.Unmarshal(m, b)
}
func (m *OnlineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnlineReq.Marshal(b, m, deterministic)
}
func (m *OnlineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlineReq.Merge(m, src)
}
func (m *OnlineReq) XXX_Size() int {
	return xxx_messageInfo_OnlineReq.Size(m)
}
func (m *OnlineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlineReq.DiscardUnknown(m)
}

var xxx_messageInfo_OnlineReq proto.InternalMessageInfo

func (m *OnlineReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OnlineReq) GetFrontNotifySvrId() int32 {
	if m != nil {
		return m.FrontNotifySvrId
	}
	return 0
}

type OnlineRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnlineRsp) Reset()         { *m = OnlineRsp{} }
func (m *OnlineRsp) String() string { return proto.CompactTextString(m) }
func (*OnlineRsp) ProtoMessage()    {}
func (*OnlineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{61}
}

func (m *OnlineRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnlineRsp.Unmarshal(m, b)
}
func (m *OnlineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnlineRsp.Marshal(b, m, deterministic)
}
func (m *OnlineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlineRsp.Merge(m, src)
}
func (m *OnlineRsp) XXX_Size() int {
	return xxx_messageInfo_OnlineRsp.Size(m)
}
func (m *OnlineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_OnlineRsp proto.InternalMessageInfo

type OfflineReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfflineReq) Reset()         { *m = OfflineReq{} }
func (m *OfflineReq) String() string { return proto.CompactTextString(m) }
func (*OfflineReq) ProtoMessage()    {}
func (*OfflineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{62}
}

func (m *OfflineReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineReq.Unmarshal(m, b)
}
func (m *OfflineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineReq.Marshal(b, m, deterministic)
}
func (m *OfflineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineReq.Merge(m, src)
}
func (m *OfflineReq) XXX_Size() int {
	return xxx_messageInfo_OfflineReq.Size(m)
}
func (m *OfflineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineReq.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineReq proto.InternalMessageInfo

func (m *OfflineReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type OfflineRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfflineRsp) Reset()         { *m = OfflineRsp{} }
func (m *OfflineRsp) String() string { return proto.CompactTextString(m) }
func (*OfflineRsp) ProtoMessage()    {}
func (*OfflineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{63}
}

func (m *OfflineRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OfflineRsp.Unmarshal(m, b)
}
func (m *OfflineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OfflineRsp.Marshal(b, m, deterministic)
}
func (m *OfflineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineRsp.Merge(m, src)
}
func (m *OfflineRsp) XXX_Size() int {
	return xxx_messageInfo_OfflineRsp.Size(m)
}
func (m *OfflineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineRsp proto.InternalMessageInfo

type CCreateNotifyStreamReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCreateNotifyStreamReq) Reset()         { *m = CCreateNotifyStreamReq{} }
func (m *CCreateNotifyStreamReq) String() string { return proto.CompactTextString(m) }
func (*CCreateNotifyStreamReq) ProtoMessage()    {}
func (*CCreateNotifyStreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{64}
}

func (m *CCreateNotifyStreamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCreateNotifyStreamReq.Unmarshal(m, b)
}
func (m *CCreateNotifyStreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCreateNotifyStreamReq.Marshal(b, m, deterministic)
}
func (m *CCreateNotifyStreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCreateNotifyStreamReq.Merge(m, src)
}
func (m *CCreateNotifyStreamReq) XXX_Size() int {
	return xxx_messageInfo_CCreateNotifyStreamReq.Size(m)
}
func (m *CCreateNotifyStreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CCreateNotifyStreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_CCreateNotifyStreamReq proto.InternalMessageInfo

func (m *CCreateNotifyStreamReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CreateNotifyStreamReq struct {
	FrontNotifySvrId     int32    `protobuf:"varint,1,opt,name=FrontNotifySvrId,proto3" json:"FrontNotifySvrId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNotifyStreamReq) Reset()         { *m = CreateNotifyStreamReq{} }
func (m *CreateNotifyStreamReq) String() string { return proto.CompactTextString(m) }
func (*CreateNotifyStreamReq) ProtoMessage()    {}
func (*CreateNotifyStreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{65}
}

func (m *CreateNotifyStreamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNotifyStreamReq.Unmarshal(m, b)
}
func (m *CreateNotifyStreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNotifyStreamReq.Marshal(b, m, deterministic)
}
func (m *CreateNotifyStreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotifyStreamReq.Merge(m, src)
}
func (m *CreateNotifyStreamReq) XXX_Size() int {
	return xxx_messageInfo_CreateNotifyStreamReq.Size(m)
}
func (m *CreateNotifyStreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotifyStreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotifyStreamReq proto.InternalMessageInfo

func (m *CreateNotifyStreamReq) GetFrontNotifySvrId() int32 {
	if m != nil {
		return m.FrontNotifySvrId
	}
	return 0
}

type Notify struct {
	PostUserId           int64    `protobuf:"varint,1,opt,name=PostUserId,proto3" json:"PostUserId,omitempty"`
	MsgId                int64    `protobuf:"varint,2,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	NotifyUserId         []int64  `protobuf:"varint,3,rep,packed,name=NotifyUserId,proto3" json:"NotifyUserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notify) Reset()         { *m = Notify{} }
func (m *Notify) String() string { return proto.CompactTextString(m) }
func (*Notify) ProtoMessage()    {}
func (*Notify) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{66}
}

func (m *Notify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notify.Unmarshal(m, b)
}
func (m *Notify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notify.Marshal(b, m, deterministic)
}
func (m *Notify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notify.Merge(m, src)
}
func (m *Notify) XXX_Size() int {
	return xxx_messageInfo_Notify.Size(m)
}
func (m *Notify) XXX_DiscardUnknown() {
	xxx_messageInfo_Notify.DiscardUnknown(m)
}

var xxx_messageInfo_Notify proto.InternalMessageInfo

func (m *Notify) GetPostUserId() int64 {
	if m != nil {
		return m.PostUserId
	}
	return 0
}

func (m *Notify) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Notify) GetNotifyUserId() []int64 {
	if m != nil {
		return m.NotifyUserId
	}
	return nil
}

type CNotify struct {
	NotifyUserId         int64    `protobuf:"varint,1,opt,name=NotifyUserId,proto3" json:"NotifyUserId,omitempty"`
	PostUserId           int64    `protobuf:"varint,2,opt,name=PostUserId,proto3" json:"PostUserId,omitempty"`
	MsgId                int64    `protobuf:"varint,3,opt,name=MsgId,proto3" json:"MsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNotify) Reset()         { *m = CNotify{} }
func (m *CNotify) String() string { return proto.CompactTextString(m) }
func (*CNotify) ProtoMessage()    {}
func (*CNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{67}
}

func (m *CNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CNotify.Unmarshal(m, b)
}
func (m *CNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CNotify.Marshal(b, m, deterministic)
}
func (m *CNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNotify.Merge(m, src)
}
func (m *CNotify) XXX_Size() int {
	return xxx_messageInfo_CNotify.Size(m)
}
func (m *CNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_CNotify.DiscardUnknown(m)
}

var xxx_messageInfo_CNotify proto.InternalMessageInfo

func (m *CNotify) GetNotifyUserId() int64 {
	if m != nil {
		return m.NotifyUserId
	}
	return 0
}

func (m *CNotify) GetPostUserId() int64 {
	if m != nil {
		return m.PostUserId
	}
	return 0
}

func (m *CNotify) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

//
type CheckAvailReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckAvailReq) Reset()         { *m = CheckAvailReq{} }
func (m *CheckAvailReq) String() string { return proto.CompactTextString(m) }
func (*CheckAvailReq) ProtoMessage()    {}
func (*CheckAvailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{68}
}

func (m *CheckAvailReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckAvailReq.Unmarshal(m, b)
}
func (m *CheckAvailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckAvailReq.Marshal(b, m, deterministic)
}
func (m *CheckAvailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAvailReq.Merge(m, src)
}
func (m *CheckAvailReq) XXX_Size() int {
	return xxx_messageInfo_CheckAvailReq.Size(m)
}
func (m *CheckAvailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAvailReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAvailReq proto.InternalMessageInfo

type CheckAvailRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckAvailRsp) Reset()         { *m = CheckAvailRsp{} }
func (m *CheckAvailRsp) String() string { return proto.CompactTextString(m) }
func (*CheckAvailRsp) ProtoMessage()    {}
func (*CheckAvailRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{69}
}

func (m *CheckAvailRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckAvailRsp.Unmarshal(m, b)
}
func (m *CheckAvailRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckAvailRsp.Marshal(b, m, deterministic)
}
func (m *CheckAvailRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAvailRsp.Merge(m, src)
}
func (m *CheckAvailRsp) XXX_Size() int {
	return xxx_messageInfo_CheckAvailRsp.Size(m)
}
func (m *CheckAvailRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAvailRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAvailRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CHeartBeatReq)(nil), "common.CHeartBeatReq")
	proto.RegisterType((*CHeartBeatRsp)(nil), "common.CHeartBeatRsp")
	proto.RegisterType((*CClientAuthInfo)(nil), "common.CClientAuthInfo")
	proto.RegisterType((*CFrontSvrAddr)(nil), "common.CFrontSvrAddr")
	proto.RegisterType((*CFrontNotifySvrAddr)(nil), "common.CFrontNotifySvrAddr")
	proto.RegisterType((*CPullReq)(nil), "common.CPullReq")
	proto.RegisterType((*CPullRsp)(nil), "common.CPullRsp")
	proto.RegisterType((*CPostReq)(nil), "common.CPostReq")
	proto.RegisterType((*CPostRsp)(nil), "common.CPostRsp")
	proto.RegisterType((*CFollowReq)(nil), "common.CFollowReq")
	proto.RegisterType((*CFollowRsp)(nil), "common.CFollowRsp")
	proto.RegisterType((*CUnFollowReq)(nil), "common.CUnFollowReq")
	proto.RegisterType((*CUnFollowRsp)(nil), "common.CUnFollowRsp")
	proto.RegisterType((*CLikeReq)(nil), "common.CLikeReq")
	proto.RegisterType((*CLikeRsp)(nil), "common.CLikeRsp")
	proto.RegisterType((*COnlineReq)(nil), "common.COnlineReq")
	proto.RegisterType((*COnlineRsp)(nil), "common.COnlineRsp")
	proto.RegisterType((*COfflineReq)(nil), "common.COfflineReq")
	proto.RegisterType((*COfflineRsp)(nil), "common.COfflineRsp")
	proto.RegisterType((*FrontCheckAvailReq)(nil), "common.FrontCheckAvailReq")
	proto.RegisterType((*FrontCheckAvailRsp)(nil), "common.FrontCheckAvailRsp")
	proto.RegisterType((*FrontNotifyCheckAvailReq)(nil), "common.FrontNotifyCheckAvailReq")
	proto.RegisterType((*FrontNotifyCheckAvailRsp)(nil), "common.FrontNotifyCheckAvailRsp")
	proto.RegisterType((*QuerySvrAddrReq)(nil), "common.QuerySvrAddrReq")
	proto.RegisterType((*QuerySvrAddrRsp)(nil), "common.QuerySvrAddrRsp")
	proto.RegisterType((*PullReq)(nil), "common.PullReq")
	proto.RegisterType((*MsgData)(nil), "common.MsgData")
	proto.RegisterType((*PullRsp)(nil), "common.PullRsp")
	proto.RegisterType((*QueryFollowListReq)(nil), "common.QueryFollowListReq")
	proto.RegisterType((*QueryFollowListRsp)(nil), "common.QueryFollowListRsp")
	proto.RegisterType((*QueryFollowedListReq)(nil), "common.QueryFollowedListReq")
	proto.RegisterType((*QueryFollowedListRsp)(nil), "common.QueryFollowedListRsp")
	proto.RegisterType((*FollowReq)(nil), "common.FollowReq")
	proto.RegisterType((*FollowRsp)(nil), "common.FollowRsp")
	proto.RegisterType((*UnFollowReq)(nil), "common.UnFollowReq")
	proto.RegisterType((*UnFollowRsp)(nil), "common.UnFollowRsp")
	proto.RegisterType((*NewUserReq)(nil), "common.NewUserReq")
	proto.RegisterType((*NewUserRsp)(nil), "common.NewUserRsp")
	proto.RegisterType((*PostReq)(nil), "common.PostReq")
	proto.RegisterType((*PostRsp)(nil), "common.PostRsp")
	proto.RegisterType((*GenMsgIdReq)(nil), "common.GenMsgIdReq")
	proto.RegisterType((*GenMsgIdRsp)(nil), "common.GenMsgIdRsp")
	proto.RegisterType((*QueryUserMsgIdSvrAddrReq)(nil), "common.QueryUserMsgIdSvrAddrReq")
	proto.RegisterType((*MsgIdSvrAddrAndUserId)(nil), "common.MsgIdSvrAddrAndUserId")
	proto.RegisterType((*QueryUserMsgIdSvrAddrRsp)(nil), "common.QueryUserMsgIdSvrAddrRsp")
	proto.RegisterType((*PullMsgReq)(nil), "common.PullMsgReq")
	proto.RegisterType((*PullMsgRsp)(nil), "common.PullMsgRsp")
	proto.RegisterType((*PullMsgIdReq)(nil), "common.PullMsgIdReq")
	proto.RegisterType((*PullMsgIdRsp)(nil), "common.PullMsgIdRsp")
	proto.RegisterType((*PostMsgIdReq)(nil), "common.PostMsgIdReq")
	proto.RegisterType((*PostMsgIdRsp)(nil), "common.PostMsgIdRsp")
	proto.RegisterType((*DeleteMsgReq)(nil), "common.DeleteMsgReq")
	proto.RegisterType((*DeleteMsgRsp)(nil), "common.DeleteMsgRsp")
	proto.RegisterType((*PullMsgContentReq)(nil), "common.PullMsgContentReq")
	proto.RegisterType((*PullMsgContentRsp)(nil), "common.PullMsgContentRsp")
	proto.RegisterType((*PostMsgContentReq)(nil), "common.PostMsgContentReq")
	proto.RegisterType((*PostMsgContentRsp)(nil), "common.PostMsgContentRsp")
	proto.RegisterType((*PushReq)(nil), "common.PushReq")
	proto.RegisterType((*PushRsp)(nil), "common.PushRsp")
	proto.RegisterType((*PushByeRsp)(nil), "common.PushByeRsp")
	proto.RegisterType((*OnlineReq)(nil), "common.OnlineReq")
	proto.RegisterType((*OnlineRsp)(nil), "common.OnlineRsp")
	proto.RegisterType((*OfflineReq)(nil), "common.OfflineReq")
	proto.RegisterType((*OfflineRsp)(nil), "common.OfflineRsp")
	proto.RegisterType((*CCreateNotifyStreamReq)(nil), "common.CCreateNotifyStreamReq")
	proto.RegisterType((*CreateNotifyStreamReq)(nil), "common.CreateNotifyStreamReq")
	proto.RegisterType((*Notify)(nil), "common.Notify")
	proto.RegisterType((*CNotify)(nil), "common.CNotify")
	proto.RegisterType((*CheckAvailReq)(nil), "common.CheckAvailReq")
	proto.RegisterType((*CheckAvailRsp)(nil), "common.CheckAvailRsp")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 1565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcb, 0x6e, 0x14, 0x47,
	0x17, 0xf6, 0xcc, 0x98, 0xb9, 0x9c, 0x19, 0xdb, 0xb8, 0xb0, 0xc1, 0xf4, 0xcf, 0x8f, 0xfc, 0x17,
	0xfc, 0xc1, 0x20, 0x44, 0x2c, 0x23, 0x30, 0x11, 0x28, 0xca, 0xd0, 0x04, 0x70, 0xf0, 0xe0, 0xd0,
	0x60, 0xb1, 0x89, 0x14, 0x0d, 0x9e, 0x9a, 0x8b, 0x98, 0xe9, 0x2e, 0xba, 0xda, 0x10, 0x16, 0x51,
	0x56, 0xd9, 0xe4, 0x35, 0xf2, 0x18, 0xd9, 0x65, 0x19, 0x29, 0x8f, 0x91, 0xf7, 0x88, 0xaa, 0xba,
	0xba, 0x2e, 0x7d, 0x99, 0xc6, 0x02, 0xb1, 0xf2, 0xf4, 0x57, 0xe7, 0x5e, 0xe7, 0x9c, 0x3a, 0xc7,
	0xd0, 0x39, 0x0a, 0x66, 0xb3, 0xc0, 0xbf, 0x41, 0xc3, 0x20, 0x0a, 0x50, 0x3d, 0xfe, 0xc2, 0x57,
	0x60, 0xc9, 0x7d, 0x4c, 0xfa, 0x61, 0x74, 0x9f, 0xf4, 0x23, 0x8f, 0xbc, 0x41, 0x67, 0xa1, 0x7e,
	0xcc, 0x48, 0xb8, 0x37, 0xd8, 0xa8, 0x6c, 0x56, 0xb6, 0x6a, 0x9e, 0xfc, 0xc2, 0x2b, 0x16, 0x21,
	0xa3, 0xf8, 0x2a, 0xac, 0xb8, 0xee, 0x74, 0x42, 0xfc, 0xa8, 0x7b, 0x1c, 0x8d, 0xf7, 0xfc, 0x61,
	0xc0, 0x79, 0x0f, 0x2d, 0xde, 0xf8, 0x0b, 0x5f, 0x82, 0x25, 0xf7, 0x61, 0x18, 0xf8, 0xd1, 0xf3,
	0xb7, 0x61, 0x77, 0x30, 0x08, 0x11, 0x82, 0x45, 0xfe, 0x57, 0x90, 0xb5, 0x3c, 0xf1, 0x1b, 0x5f,
	0x85, 0x33, 0x31, 0xd1, 0xd3, 0x20, 0x9a, 0x0c, 0xdf, 0xcf, 0x23, 0xfd, 0x06, 0x9a, 0xee, 0xf7,
	0xc7, 0xd3, 0xa9, 0xb4, 0x37, 0x4f, 0x27, 0xba, 0x00, 0xad, 0xfd, 0x3e, 0x8b, 0x7a, 0x6c, 0xb4,
	0x37, 0xd8, 0xa8, 0x8a, 0x23, 0x0d, 0xe0, 0x9b, 0x89, 0x04, 0x46, 0xd1, 0x15, 0xa8, 0xf7, 0xd8,
	0xa8, 0x1b, 0x72, 0x1d, 0xb5, 0xad, 0xf6, 0xce, 0xca, 0x0d, 0x19, 0xa9, 0x1e, 0x1b, 0x3d, 0xe8,
	0x47, 0x7d, 0x4f, 0x1e, 0xe3, 0x6f, 0x39, 0x53, 0xc0, 0xa2, 0x79, 0x6a, 0xff, 0x07, 0xb5, 0x1e,
	0x1b, 0x09, 0x85, 0x39, 0x92, 0xf8, 0x19, 0xde, 0x4c, 0xc4, 0x30, 0x8a, 0xd6, 0xe0, 0x54, 0x6c,
	0x61, 0x2c, 0x25, 0xfe, 0xc0, 0xfb, 0x00, 0xee, 0xc3, 0x60, 0x3a, 0x0d, 0xde, 0xcd, 0x53, 0xf5,
	0x05, 0x2c, 0xc7, 0x44, 0x64, 0x20, 0xcf, 0x63, 0x37, 0x53, 0x28, 0xee, 0x68, 0x69, 0x8c, 0x62,
	0x0f, 0x3a, 0xee, 0xa1, 0x5f, 0x2e, 0xfd, 0x1a, 0x9c, 0x4e, 0xc8, 0x52, 0xf2, 0x33, 0x38, 0x5e,
	0x36, 0x65, 0x32, 0x8a, 0xef, 0x40, 0xd3, 0xdd, 0x9f, 0xbc, 0x26, 0xf3, 0xe4, 0x2b, 0xcf, 0xab,
	0xa6, 0xe7, 0x90, 0x70, 0x32, 0x8a, 0x2f, 0x03, 0xb8, 0x07, 0xfe, 0x74, 0xe2, 0xcf, 0x93, 0x23,
	0xbc, 0x93, 0x54, 0x8c, 0xe2, 0xff, 0x43, 0xdb, 0x3d, 0x18, 0x0e, 0xcb, 0x98, 0x96, 0x0c, 0x32,
	0x46, 0xf1, 0x1a, 0x20, 0x91, 0x79, 0xee, 0x98, 0x1c, 0xbd, 0xee, 0xbe, 0xed, 0x4f, 0x78, 0x66,
	0xe5, 0xa1, 0x8c, 0x62, 0x07, 0x36, 0x8c, 0x2c, 0xb5, 0x39, 0x0a, 0xcf, 0x18, 0xc5, 0x77, 0x61,
	0xe5, 0xd9, 0x31, 0x09, 0x93, 0xbc, 0xe6, 0xd6, 0x6d, 0xc1, 0x0a, 0xcf, 0x48, 0x8f, 0x0c, 0x43,
	0xc2, 0xc6, 0x2f, 0x26, 0x33, 0x22, 0xcd, 0x4c, 0xc3, 0xb8, 0x9f, 0x62, 0x66, 0x14, 0x6d, 0x40,
	0xa3, 0xeb, 0x33, 0x83, 0x29, 0xf9, 0x44, 0x9b, 0xd0, 0x7e, 0x4a, 0xc8, 0x40, 0xf2, 0x8b, 0xf8,
	0x36, 0x3d, 0x13, 0x52, 0x35, 0x55, 0x33, 0x6a, 0xea, 0x47, 0x68, 0x24, 0x25, 0x75, 0x11, 0x60,
	0xc8, 0xdd, 0xf0, 0xc8, 0x1b, 0x15, 0x39, 0x03, 0x31, 0xa2, 0x5a, 0x2d, 0x2e, 0xb9, 0x5a, 0xba,
	0xe4, 0x7e, 0xad, 0x40, 0x43, 0xd6, 0x41, 0x7e, 0xda, 0x17, 0xca, 0x45, 0xb0, 0x18, 0x91, 0x9f,
	0xa2, 0xc4, 0x5c, 0xfe, 0x9b, 0xeb, 0x9a, 0xcc, 0x46, 0x87, 0xe1, 0x94, 0xd7, 0xed, 0xe2, 0x66,
	0x6d, 0xab, 0xe5, 0x69, 0x00, 0x39, 0xd0, 0x7c, 0x3b, 0x19, 0x90, 0xe0, 0x30, 0x9c, 0x6e, 0x9c,
	0x12, 0x5c, 0xea, 0x1b, 0x7b, 0xd2, 0x51, 0x46, 0x4b, 0x1d, 0xd5, 0x9d, 0xa1, 0x3a, 0xbf, 0x33,
	0x5c, 0x07, 0x24, 0xee, 0x27, 0x2e, 0x81, 0xfd, 0xc9, 0xdc, 0x1e, 0x81, 0x6f, 0x67, 0xa9, 0x19,
	0xe5, 0xd7, 0x16, 0x03, 0x7b, 0x83, 0xa4, 0x17, 0xd5, 0x3c, 0x13, 0xc2, 0x37, 0x60, 0xcd, 0xe0,
	0x23, 0x83, 0x32, 0x3d, 0xf7, 0xf2, 0xe8, 0x19, 0x45, 0x97, 0x61, 0x29, 0x81, 0x4c, 0x5d, 0x36,
	0x88, 0x9f, 0x40, 0x2b, 0xaf, 0x4b, 0x54, 0x4b, 0x7a, 0x50, 0x2d, 0xb7, 0x07, 0xb5, 0x95, 0x30,
	0x46, 0xf1, 0x33, 0x68, 0x7f, 0xea, 0x0e, 0xb4, 0x64, 0x88, 0x8c, 0x5b, 0xc7, 0x53, 0xf2, 0x8e,
	0x9f, 0x95, 0xb4, 0x8e, 0x84, 0x8a, 0x51, 0xfc, 0x02, 0x1a, 0x49, 0x73, 0x2f, 0xcb, 0x8b, 0xab,
	0xd0, 0x70, 0x03, 0x3f, 0x22, 0x7e, 0x54, 0xd4, 0xe8, 0x93, 0x73, 0xfc, 0x52, 0x4a, 0xfd, 0x80,
	0x6c, 0x2b, 0x8a, 0xb1, 0x2a, 0x96, 0x9a, 0xd9, 0x29, 0x97, 0xa0, 0xfd, 0x88, 0xf8, 0xe2, 0x37,
	0x6f, 0x3d, 0x97, 0x8c, 0xcf, 0xc2, 0x77, 0xe5, 0x0e, 0x6c, 0x88, 0x84, 0xe0, 0x82, 0x05, 0x62,
	0x34, 0xa3, 0x0b, 0xd0, 0x8a, 0xf5, 0xe9, 0x84, 0xd0, 0x00, 0xde, 0x83, 0x75, 0x93, 0xa1, 0xeb,
	0x0f, 0x74, 0x6d, 0xa6, 0x9f, 0x67, 0x5b, 0x54, 0x35, 0x2d, 0xea, 0x79, 0x91, 0x11, 0x8c, 0xa2,
	0x5d, 0x68, 0xf0, 0xf0, 0xe9, 0xb7, 0xf8, 0xbf, 0x46, 0x60, 0xb3, 0xda, 0xbd, 0x84, 0x1a, 0x3f,
	0x06, 0xe0, 0x45, 0xdd, 0x63, 0xa3, 0x52, 0x5f, 0x4a, 0x26, 0x83, 0x5b, 0x5a, 0xd2, 0x49, 0x66,
	0x83, 0xef, 0xa0, 0x23, 0xd9, 0xc4, 0x7d, 0x7c, 0x94, 0x09, 0xd7, 0x4c, 0x59, 0x8c, 0xf2, 0x6e,
	0x26, 0x7e, 0x6b, 0x51, 0xea, 0x1b, 0xdf, 0x83, 0x0e, 0xcf, 0x2f, 0xa5, 0xf7, 0x64, 0xcf, 0xed,
	0xb2, 0xc9, 0xcd, 0x28, 0x97, 0xf6, 0x80, 0x4c, 0x49, 0x44, 0x64, 0x20, 0x4f, 0x2c, 0x4d, 0x73,
	0x33, 0x8a, 0xbf, 0x84, 0x55, 0xe9, 0x87, 0xac, 0x06, 0x2e, 0xd2, 0x81, 0xe6, 0x2c, 0xe5, 0xcc,
	0x4c, 0x3b, 0x93, 0x66, 0x38, 0xc9, 0x15, 0x7c, 0x0d, 0xab, 0xd2, 0x19, 0x43, 0x9d, 0x51, 0xaa,
	0x95, 0x92, 0x52, 0x3d, 0x93, 0xe1, 0x67, 0x14, 0xef, 0xf2, 0xd7, 0x82, 0x8d, 0x4f, 0x1e, 0x8c,
	0x96, 0x64, 0x64, 0x94, 0xf7, 0x19, 0xfe, 0xf3, 0xfe, 0x7b, 0x31, 0x6c, 0x1c, 0x40, 0xab, 0x74,
	0xaa, 0xe1, 0xbd, 0xcf, 0x9e, 0x85, 0xa5, 0xf8, 0x53, 0x5e, 0x06, 0xe7, 0xbd, 0x55, 0x0f, 0x40,
	0x97, 0x01, 0x3e, 0x60, 0xfe, 0xe9, 0x68, 0x2a, 0x46, 0xf1, 0x36, 0x9c, 0x75, 0xdd, 0x90, 0xf4,
	0x23, 0x22, 0xc5, 0x46, 0x21, 0xe9, 0xcf, 0xe6, 0x2d, 0x03, 0x2e, 0xac, 0xe7, 0x33, 0xe4, 0xd9,
	0x5d, 0x29, 0xb0, 0xfb, 0x15, 0xd4, 0xe3, 0x4f, 0xde, 0x19, 0x79, 0xe4, 0x2d, 0x53, 0x0d, 0x24,
	0x3f, 0xc2, 0x08, 0x43, 0x27, 0xe6, 0x57, 0x2f, 0x0f, 0xcf, 0x26, 0x0b, 0xc3, 0x47, 0xd0, 0x70,
	0xa5, 0x92, 0x34, 0x79, 0xac, 0xc6, 0xc2, 0x52, 0x86, 0x54, 0x8b, 0x0d, 0xb1, 0x5a, 0x31, 0x5f,
	0x8d, 0xac, 0x39, 0xd0, 0x06, 0x18, 0xdd, 0xf9, 0xab, 0x0a, 0xcd, 0xa1, 0x5c, 0x80, 0xd0, 0x75,
	0x58, 0xe4, 0x59, 0x8e, 0x4e, 0x27, 0x99, 0x98, 0xec, 0x32, 0x4e, 0x0a, 0x61, 0x14, 0x2f, 0x08,
	0xea, 0x80, 0x45, 0x26, 0x75, 0xfc, 0x4a, 0x39, 0x29, 0x44, 0x50, 0xef, 0x40, 0x3d, 0x7e, 0x05,
	0x11, 0x52, 0xa7, 0xea, 0xa5, 0x75, 0x32, 0x98, 0xe0, 0xb9, 0x03, 0xcd, 0xe4, 0xed, 0x44, 0x6b,
	0x8a, 0xc2, 0x78, 0xa1, 0x9d, 0x1c, 0x34, 0xb1, 0x8d, 0x0f, 0xeb, 0x86, 0x6d, 0x72, 0xea, 0x77,
	0x52, 0x88, 0xa0, 0x7e, 0x08, 0xa0, 0xa3, 0x82, 0x9c, 0x84, 0x22, 0x3b, 0x79, 0x3b, 0x85, 0x67,
	0x5c, 0xce, 0x8e, 0x07, 0xed, 0x24, 0x96, 0x3d, 0x7f, 0x84, 0x5c, 0x39, 0x1b, 0xf7, 0xde, 0x27,
	0x2b, 0x26, 0x3a, 0xa7, 0xb4, 0xdb, 0x0b, 0xaa, 0xb3, 0xae, 0x03, 0x60, 0xac, 0xa3, 0x78, 0x61,
	0xe7, 0xf7, 0x2a, 0x2c, 0x0f, 0xad, 0x04, 0x45, 0x7b, 0x80, 0x8e, 0x32, 0x39, 0x8e, 0x2e, 0x6a,
	0xd1, 0x79, 0x05, 0xe0, 0xa8, 0xf6, 0x22, 0xd3, 0x0e, 0x2f, 0x6c, 0x57, 0xd0, 0x2d, 0x68, 0xc8,
	0x72, 0x43, 0x67, 0xd4, 0xb9, 0x2e, 0x53, 0x27, 0x0b, 0x8a, 0x80, 0xdd, 0x85, 0x96, 0xda, 0xb8,
	0x91, 0x36, 0xdd, 0x5c, 0xd7, 0x9d, 0x3c, 0x58, 0x30, 0x7b, 0x56, 0xb4, 0x37, 0xad, 0x88, 0xe6,
	0xec, 0x2e, 0x4e, 0x09, 0x85, 0x88, 0xfc, 0x00, 0x56, 0xed, 0x20, 0xf1, 0xf8, 0x1f, 0xc0, 0xba,
	0x19, 0x7f, 0x1d, 0xc0, 0xc2, 0x5b, 0xf8, 0x8f, 0x7d, 0x0b, 0xd6, 0xbe, 0x8f, 0x17, 0x76, 0x7e,
	0x81, 0x06, 0x3d, 0x9e, 0x4e, 0xb9, 0x88, 0xdb, 0xd0, 0x89, 0xef, 0x40, 0x46, 0x5f, 0x45, 0x37,
	0xa9, 0x18, 0x1b, 0xe0, 0x46, 0x6e, 0x55, 0xb6, 0x2b, 0xe8, 0x9e, 0xe5, 0xbc, 0x8e, 0x91, 0xe5,
	0x71, 0x1e, 0x2c, 0xdc, 0xe4, 0x06, 0x04, 0x2c, 0x9a, 0x6f, 0x80, 0x2c, 0x42, 0x1b, 0xf8, 0x44,
	0x06, 0x3c, 0x86, 0x65, 0xf1, 0x26, 0x3e, 0x22, 0x3e, 0x09, 0xfb, 0x51, 0xc0, 0xed, 0x68, 0x26,
	0xe3, 0x9d, 0x4e, 0x21, 0x63, 0xfe, 0x73, 0xb2, 0xa0, 0x90, 0xf4, 0x67, 0x05, 0x5a, 0x43, 0x51,
	0xb1, 0xdc, 0x9b, 0x27, 0xb2, 0x54, 0xf4, 0xe2, 0xa1, 0xcb, 0x30, 0xbb, 0xbf, 0x38, 0x85, 0x67,
	0x22, 0xc1, 0xb6, 0x55, 0xab, 0x59, 0x55, 0xa9, 0xa3, 0x3a, 0x46, 0x1a, 0x12, 0x1c, 0xb7, 0x8d,
	0x46, 0xa3, 0xec, 0x35, 0xfb, 0x4c, 0x16, 0x14, 0x4e, 0xfc, 0x56, 0x83, 0xf6, 0x50, 0xce, 0xfb,
	0xdc, 0x8d, 0x67, 0xb0, 0x9a, 0xd9, 0x6b, 0xd0, 0x85, 0x1c, 0x63, 0xd5, 0x8a, 0xe4, 0xcc, 0x39,
	0x15, 0xa6, 0xbd, 0x84, 0x73, 0xe2, 0x24, 0x7e, 0x48, 0x3f, 0xa1, 0xe0, 0x6d, 0xa8, 0xc7, 0x32,
	0x75, 0x94, 0xd4, 0xeb, 0xef, 0xa4, 0x21, 0xc1, 0x71, 0x53, 0x37, 0x0b, 0xd5, 0xaf, 0x8d, 0x5e,
	0x91, 0xc1, 0x3e, 0xf3, 0x65, 0xfc, 0x0c, 0xab, 0x21, 0x99, 0xf6, 0xa3, 0x49, 0xe0, 0xbb, 0xe3,
	0xbe, 0x3f, 0x22, 0xfc, 0x46, 0x3e, 0x9f, 0xfa, 0x00, 0x56, 0x8e, 0x8d, 0xc5, 0x81, 0x37, 0xa0,
	0x1f, 0xe4, 0x9a, 0x9b, 0x5a, 0x28, 0x74, 0xcf, 0x2b, 0xda, 0x79, 0x9c, 0x12, 0x0a, 0xa1, 0xf0,
	0x8f, 0x0a, 0x74, 0x4c, 0x8d, 0x68, 0x37, 0xfe, 0xff, 0x41, 0x8f, 0x8d, 0xf4, 0x6b, 0x69, 0x8e,
	0xfe, 0x4e, 0x0e, 0x2a, 0x5c, 0xde, 0x8d, 0x57, 0x41, 0x9b, 0xd1, 0x98, 0xdd, 0x9d, 0x1c, 0x54,
	0x30, 0x7e, 0x05, 0x2d, 0x35, 0x57, 0x6b, 0x56, 0x73, 0x50, 0x77, 0x72, 0x50, 0x61, 0xfd, 0xdf,
	0x15, 0x80, 0xa3, 0x78, 0x9a, 0xe5, 0xb6, 0x77, 0xb5, 0xed, 0xe7, 0x53, 0x56, 0xea, 0x99, 0xd9,
	0x29, 0x3a, 0x12, 0xc6, 0x74, 0xb5, 0x17, 0xe7, 0x53, 0xf6, 0xe6, 0x8a, 0xc8, 0x4c, 0xd4, 0x1f,
	0xe5, 0xcf, 0x3f, 0x15, 0xfe, 0x38, 0xb0, 0x31, 0x77, 0xe6, 0x1a, 0x9f, 0xa3, 0xd8, 0xd8, 0x7c,
	0x14, 0xc4, 0xa0, 0xee, 0xd8, 0xc0, 0xe7, 0x2c, 0xc3, 0x47, 0x80, 0xb2, 0x63, 0x01, 0x52, 0x4b,
	0x6c, 0xfe, 0xc8, 0xb0, 0x9c, 0x1c, 0xeb, 0x89, 0xe1, 0x55, 0x5d, 0xfc, 0x97, 0xfe, 0xe6, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x03, 0x82, 0x9b, 0x2a, 0xb5, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrontSvrClient is the client API for FrontSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontSvrClient interface {
	//for Client////////////
	//拉取若干条微博消息
	Pull(ctx context.Context, in *CPullReq, opts ...grpc.CallOption) (*CPullRsp, error)
	//发布一条微博消息
	Post(ctx context.Context, in *CPostReq, opts ...grpc.CallOption) (*CPostRsp, error)
	//关注
	Follow(ctx context.Context, in *CFollowReq, opts ...grpc.CallOption) (*CFollowRsp, error)
	//取关
	UnFollow(ctx context.Context, in *CUnFollowReq, opts ...grpc.CallOption) (*CUnFollowRsp, error)
	//点赞
	Like(ctx context.Context, in *CLikeReq, opts ...grpc.CallOption) (*CLikeRsp, error)
	//for frontSvrMng////////////
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(ctx context.Context, in *FrontCheckAvailReq, opts ...grpc.CallOption) (*FrontCheckAvailRsp, error)
}

type frontSvrClient struct {
	cc *grpc.ClientConn
}

func NewFrontSvrClient(cc *grpc.ClientConn) FrontSvrClient {
	return &frontSvrClient{cc}
}

func (c *frontSvrClient) Pull(ctx context.Context, in *CPullReq, opts ...grpc.CallOption) (*CPullRsp, error) {
	out := new(CPullRsp)
	err := c.cc.Invoke(ctx, "/common.frontSvr/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontSvrClient) Post(ctx context.Context, in *CPostReq, opts ...grpc.CallOption) (*CPostRsp, error) {
	out := new(CPostRsp)
	err := c.cc.Invoke(ctx, "/common.frontSvr/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontSvrClient) Follow(ctx context.Context, in *CFollowReq, opts ...grpc.CallOption) (*CFollowRsp, error) {
	out := new(CFollowRsp)
	err := c.cc.Invoke(ctx, "/common.frontSvr/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontSvrClient) UnFollow(ctx context.Context, in *CUnFollowReq, opts ...grpc.CallOption) (*CUnFollowRsp, error) {
	out := new(CUnFollowRsp)
	err := c.cc.Invoke(ctx, "/common.frontSvr/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontSvrClient) Like(ctx context.Context, in *CLikeReq, opts ...grpc.CallOption) (*CLikeRsp, error) {
	out := new(CLikeRsp)
	err := c.cc.Invoke(ctx, "/common.frontSvr/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontSvrClient) CheckAvail(ctx context.Context, in *FrontCheckAvailReq, opts ...grpc.CallOption) (*FrontCheckAvailRsp, error) {
	out := new(FrontCheckAvailRsp)
	err := c.cc.Invoke(ctx, "/common.frontSvr/CheckAvail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontSvrServer is the server API for FrontSvr service.
type FrontSvrServer interface {
	//for Client////////////
	//拉取若干条微博消息
	Pull(context.Context, *CPullReq) (*CPullRsp, error)
	//发布一条微博消息
	Post(context.Context, *CPostReq) (*CPostRsp, error)
	//关注
	Follow(context.Context, *CFollowReq) (*CFollowRsp, error)
	//取关
	UnFollow(context.Context, *CUnFollowReq) (*CUnFollowRsp, error)
	//点赞
	Like(context.Context, *CLikeReq) (*CLikeRsp, error)
	//for frontSvrMng////////////
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(context.Context, *FrontCheckAvailReq) (*FrontCheckAvailRsp, error)
}

// UnimplementedFrontSvrServer can be embedded to have forward compatible implementations.
type UnimplementedFrontSvrServer struct {
}

func (*UnimplementedFrontSvrServer) Pull(ctx context.Context, req *CPullReq) (*CPullRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedFrontSvrServer) Post(ctx context.Context, req *CPostReq) (*CPostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedFrontSvrServer) Follow(ctx context.Context, req *CFollowReq) (*CFollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedFrontSvrServer) UnFollow(ctx context.Context, req *CUnFollowReq) (*CUnFollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (*UnimplementedFrontSvrServer) Like(ctx context.Context, req *CLikeReq) (*CLikeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (*UnimplementedFrontSvrServer) CheckAvail(ctx context.Context, req *FrontCheckAvailReq) (*FrontCheckAvailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvail not implemented")
}

func RegisterFrontSvrServer(s *grpc.Server, srv FrontSvrServer) {
	s.RegisterService(&_FrontSvr_serviceDesc, srv)
}

func _FrontSvr_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvr/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrServer).Pull(ctx, req.(*CPullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontSvr_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvr/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrServer).Post(ctx, req.(*CPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontSvr_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvr/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrServer).Follow(ctx, req.(*CFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontSvr_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CUnFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvr/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrServer).UnFollow(ctx, req.(*CUnFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontSvr_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvr/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrServer).Like(ctx, req.(*CLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontSvr_CheckAvail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontCheckAvailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrServer).CheckAvail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvr/CheckAvail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrServer).CheckAvail(ctx, req.(*FrontCheckAvailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.frontSvr",
	HandlerType: (*FrontSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pull",
			Handler:    _FrontSvr_Pull_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _FrontSvr_Post_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _FrontSvr_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _FrontSvr_UnFollow_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _FrontSvr_Like_Handler,
		},
		{
			MethodName: "CheckAvail",
			Handler:    _FrontSvr_CheckAvail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// FrontSvrMngClient is the client API for FrontSvrMng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontSvrMngClient interface {
	//for Client////////////
	//查询本次归宿frontSvr
	QueryMyFrontSvr(ctx context.Context, in *CClientAuthInfo, opts ...grpc.CallOption) (*CFrontSvrAddr, error)
}

type frontSvrMngClient struct {
	cc *grpc.ClientConn
}

func NewFrontSvrMngClient(cc *grpc.ClientConn) FrontSvrMngClient {
	return &frontSvrMngClient{cc}
}

func (c *frontSvrMngClient) QueryMyFrontSvr(ctx context.Context, in *CClientAuthInfo, opts ...grpc.CallOption) (*CFrontSvrAddr, error) {
	out := new(CFrontSvrAddr)
	err := c.cc.Invoke(ctx, "/common.frontSvrMng/QueryMyFrontSvr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontSvrMngServer is the server API for FrontSvrMng service.
type FrontSvrMngServer interface {
	//for Client////////////
	//查询本次归宿frontSvr
	QueryMyFrontSvr(context.Context, *CClientAuthInfo) (*CFrontSvrAddr, error)
}

// UnimplementedFrontSvrMngServer can be embedded to have forward compatible implementations.
type UnimplementedFrontSvrMngServer struct {
}

func (*UnimplementedFrontSvrMngServer) QueryMyFrontSvr(ctx context.Context, req *CClientAuthInfo) (*CFrontSvrAddr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMyFrontSvr not implemented")
}

func RegisterFrontSvrMngServer(s *grpc.Server, srv FrontSvrMngServer) {
	s.RegisterService(&_FrontSvrMng_serviceDesc, srv)
}

func _FrontSvrMng_QueryMyFrontSvr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientAuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontSvrMngServer).QueryMyFrontSvr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontSvrMng/QueryMyFrontSvr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontSvrMngServer).QueryMyFrontSvr(ctx, req.(*CClientAuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontSvrMng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.frontSvrMng",
	HandlerType: (*FrontSvrMngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMyFrontSvr",
			Handler:    _FrontSvrMng_QueryMyFrontSvr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// FrontNotifySvrClient is the client API for FrontNotifySvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontNotifySvrClient interface {
	//for Client////////////
	//客户端建立服务端流式stream，接收notify。接收失败时重新选择frontNotifySvr重新发起链接创建新的stream
	CreateNotifyStream(ctx context.Context, in *CCreateNotifyStreamReq, opts ...grpc.CallOption) (FrontNotifySvr_CreateNotifyStreamClient, error)
	//userId下线
	Offline(ctx context.Context, in *COfflineReq, opts ...grpc.CallOption) (*COfflineRsp, error)
	HeartBeat(ctx context.Context, in *CHeartBeatReq, opts ...grpc.CallOption) (*CHeartBeatRsp, error)
	//for frontNotifySvrMng////////////
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(ctx context.Context, in *FrontNotifyCheckAvailReq, opts ...grpc.CallOption) (*FrontNotifyCheckAvailRsp, error)
}

type frontNotifySvrClient struct {
	cc *grpc.ClientConn
}

func NewFrontNotifySvrClient(cc *grpc.ClientConn) FrontNotifySvrClient {
	return &frontNotifySvrClient{cc}
}

func (c *frontNotifySvrClient) CreateNotifyStream(ctx context.Context, in *CCreateNotifyStreamReq, opts ...grpc.CallOption) (FrontNotifySvr_CreateNotifyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrontNotifySvr_serviceDesc.Streams[0], "/common.frontNotifySvr/createNotifyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontNotifySvrCreateNotifyStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrontNotifySvr_CreateNotifyStreamClient interface {
	Recv() (*CNotify, error)
	grpc.ClientStream
}

type frontNotifySvrCreateNotifyStreamClient struct {
	grpc.ClientStream
}

func (x *frontNotifySvrCreateNotifyStreamClient) Recv() (*CNotify, error) {
	m := new(CNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontNotifySvrClient) Offline(ctx context.Context, in *COfflineReq, opts ...grpc.CallOption) (*COfflineRsp, error) {
	out := new(COfflineRsp)
	err := c.cc.Invoke(ctx, "/common.frontNotifySvr/Offline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontNotifySvrClient) HeartBeat(ctx context.Context, in *CHeartBeatReq, opts ...grpc.CallOption) (*CHeartBeatRsp, error) {
	out := new(CHeartBeatRsp)
	err := c.cc.Invoke(ctx, "/common.frontNotifySvr/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontNotifySvrClient) CheckAvail(ctx context.Context, in *FrontNotifyCheckAvailReq, opts ...grpc.CallOption) (*FrontNotifyCheckAvailRsp, error) {
	out := new(FrontNotifyCheckAvailRsp)
	err := c.cc.Invoke(ctx, "/common.frontNotifySvr/CheckAvail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontNotifySvrServer is the server API for FrontNotifySvr service.
type FrontNotifySvrServer interface {
	//for Client////////////
	//客户端建立服务端流式stream，接收notify。接收失败时重新选择frontNotifySvr重新发起链接创建新的stream
	CreateNotifyStream(*CCreateNotifyStreamReq, FrontNotifySvr_CreateNotifyStreamServer) error
	//userId下线
	Offline(context.Context, *COfflineReq) (*COfflineRsp, error)
	HeartBeat(context.Context, *CHeartBeatReq) (*CHeartBeatRsp, error)
	//for frontNotifySvrMng////////////
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(context.Context, *FrontNotifyCheckAvailReq) (*FrontNotifyCheckAvailRsp, error)
}

// UnimplementedFrontNotifySvrServer can be embedded to have forward compatible implementations.
type UnimplementedFrontNotifySvrServer struct {
}

func (*UnimplementedFrontNotifySvrServer) CreateNotifyStream(req *CCreateNotifyStreamReq, srv FrontNotifySvr_CreateNotifyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNotifyStream not implemented")
}
func (*UnimplementedFrontNotifySvrServer) Offline(ctx context.Context, req *COfflineReq) (*COfflineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (*UnimplementedFrontNotifySvrServer) HeartBeat(ctx context.Context, req *CHeartBeatReq) (*CHeartBeatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (*UnimplementedFrontNotifySvrServer) CheckAvail(ctx context.Context, req *FrontNotifyCheckAvailReq) (*FrontNotifyCheckAvailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvail not implemented")
}

func RegisterFrontNotifySvrServer(s *grpc.Server, srv FrontNotifySvrServer) {
	s.RegisterService(&_FrontNotifySvr_serviceDesc, srv)
}

func _FrontNotifySvr_CreateNotifyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CCreateNotifyStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontNotifySvrServer).CreateNotifyStream(m, &frontNotifySvrCreateNotifyStreamServer{stream})
}

type FrontNotifySvr_CreateNotifyStreamServer interface {
	Send(*CNotify) error
	grpc.ServerStream
}

type frontNotifySvrCreateNotifyStreamServer struct {
	grpc.ServerStream
}

func (x *frontNotifySvrCreateNotifyStreamServer) Send(m *CNotify) error {
	return x.ServerStream.SendMsg(m)
}

func _FrontNotifySvr_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(COfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontNotifySvrServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontNotifySvr/Offline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontNotifySvrServer).Offline(ctx, req.(*COfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontNotifySvr_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CHeartBeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontNotifySvrServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontNotifySvr/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontNotifySvrServer).HeartBeat(ctx, req.(*CHeartBeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontNotifySvr_CheckAvail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontNotifyCheckAvailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontNotifySvrServer).CheckAvail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontNotifySvr/CheckAvail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontNotifySvrServer).CheckAvail(ctx, req.(*FrontNotifyCheckAvailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontNotifySvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.frontNotifySvr",
	HandlerType: (*FrontNotifySvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Offline",
			Handler:    _FrontNotifySvr_Offline_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _FrontNotifySvr_HeartBeat_Handler,
		},
		{
			MethodName: "CheckAvail",
			Handler:    _FrontNotifySvr_CheckAvail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "createNotifyStream",
			Handler:       _FrontNotifySvr_CreateNotifyStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common.proto",
}

// FrontNotifySvrMngClient is the client API for FrontNotifySvrMng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontNotifySvrMngClient interface {
	//for Client////////////
	//查询本次归宿frontNotifySvr
	QueryMyFrontNotifySvr(ctx context.Context, in *CClientAuthInfo, opts ...grpc.CallOption) (*CFrontNotifySvrAddr, error)
}

type frontNotifySvrMngClient struct {
	cc *grpc.ClientConn
}

func NewFrontNotifySvrMngClient(cc *grpc.ClientConn) FrontNotifySvrMngClient {
	return &frontNotifySvrMngClient{cc}
}

func (c *frontNotifySvrMngClient) QueryMyFrontNotifySvr(ctx context.Context, in *CClientAuthInfo, opts ...grpc.CallOption) (*CFrontNotifySvrAddr, error) {
	out := new(CFrontNotifySvrAddr)
	err := c.cc.Invoke(ctx, "/common.frontNotifySvrMng/QueryMyFrontNotifySvr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontNotifySvrMngServer is the server API for FrontNotifySvrMng service.
type FrontNotifySvrMngServer interface {
	//for Client////////////
	//查询本次归宿frontNotifySvr
	QueryMyFrontNotifySvr(context.Context, *CClientAuthInfo) (*CFrontNotifySvrAddr, error)
}

// UnimplementedFrontNotifySvrMngServer can be embedded to have forward compatible implementations.
type UnimplementedFrontNotifySvrMngServer struct {
}

func (*UnimplementedFrontNotifySvrMngServer) QueryMyFrontNotifySvr(ctx context.Context, req *CClientAuthInfo) (*CFrontNotifySvrAddr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMyFrontNotifySvr not implemented")
}

func RegisterFrontNotifySvrMngServer(s *grpc.Server, srv FrontNotifySvrMngServer) {
	s.RegisterService(&_FrontNotifySvrMng_serviceDesc, srv)
}

func _FrontNotifySvrMng_QueryMyFrontNotifySvr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CClientAuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontNotifySvrMngServer).QueryMyFrontNotifySvr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.frontNotifySvrMng/QueryMyFrontNotifySvr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontNotifySvrMngServer).QueryMyFrontNotifySvr(ctx, req.(*CClientAuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontNotifySvrMng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.frontNotifySvrMng",
	HandlerType: (*FrontNotifySvrMngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMyFrontNotifySvr",
			Handler:    _FrontNotifySvrMng_QueryMyFrontNotifySvr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// PullSvrClient is the client API for PullSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PullSvrClient interface {
	//建立双向stream，后续req和rsp通过此通道传送
	CreateStream(ctx context.Context, opts ...grpc.CallOption) (PullSvr_CreateStreamClient, error)
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(ctx context.Context, in *CheckAvailReq, opts ...grpc.CallOption) (*CheckAvailRsp, error)
}

type pullSvrClient struct {
	cc *grpc.ClientConn
}

func NewPullSvrClient(cc *grpc.ClientConn) PullSvrClient {
	return &pullSvrClient{cc}
}

func (c *pullSvrClient) CreateStream(ctx context.Context, opts ...grpc.CallOption) (PullSvr_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PullSvr_serviceDesc.Streams[0], "/common.pullSvr/createStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pullSvrCreateStreamClient{stream}
	return x, nil
}

type PullSvr_CreateStreamClient interface {
	Send(*PullReq) error
	Recv() (*PullRsp, error)
	grpc.ClientStream
}

type pullSvrCreateStreamClient struct {
	grpc.ClientStream
}

func (x *pullSvrCreateStreamClient) Send(m *PullReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pullSvrCreateStreamClient) Recv() (*PullRsp, error) {
	m := new(PullRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pullSvrClient) CheckAvail(ctx context.Context, in *CheckAvailReq, opts ...grpc.CallOption) (*CheckAvailRsp, error) {
	out := new(CheckAvailRsp)
	err := c.cc.Invoke(ctx, "/common.pullSvr/CheckAvail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PullSvrServer is the server API for PullSvr service.
type PullSvrServer interface {
	//建立双向stream，后续req和rsp通过此通道传送
	CreateStream(PullSvr_CreateStreamServer) error
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(context.Context, *CheckAvailReq) (*CheckAvailRsp, error)
}

// UnimplementedPullSvrServer can be embedded to have forward compatible implementations.
type UnimplementedPullSvrServer struct {
}

func (*UnimplementedPullSvrServer) CreateStream(srv PullSvr_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedPullSvrServer) CheckAvail(ctx context.Context, req *CheckAvailReq) (*CheckAvailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvail not implemented")
}

func RegisterPullSvrServer(s *grpc.Server, srv PullSvrServer) {
	s.RegisterService(&_PullSvr_serviceDesc, srv)
}

func _PullSvr_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PullSvrServer).CreateStream(&pullSvrCreateStreamServer{stream})
}

type PullSvr_CreateStreamServer interface {
	Send(*PullRsp) error
	Recv() (*PullReq, error)
	grpc.ServerStream
}

type pullSvrCreateStreamServer struct {
	grpc.ServerStream
}

func (x *pullSvrCreateStreamServer) Send(m *PullRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pullSvrCreateStreamServer) Recv() (*PullReq, error) {
	m := new(PullReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PullSvr_CheckAvail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PullSvrServer).CheckAvail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.pullSvr/CheckAvail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PullSvrServer).CheckAvail(ctx, req.(*CheckAvailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PullSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.pullSvr",
	HandlerType: (*PullSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvail",
			Handler:    _PullSvr_CheckAvail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "createStream",
			Handler:       _PullSvr_CreateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}

// PostSvrClient is the client API for PostSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PostSvrClient interface {
	//建立双向stream，后续req和rsp通过此通道传送
	CreateStream(ctx context.Context, opts ...grpc.CallOption) (PostSvr_CreateStreamClient, error)
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(ctx context.Context, in *CheckAvailReq, opts ...grpc.CallOption) (*CheckAvailRsp, error)
}

type postSvrClient struct {
	cc *grpc.ClientConn
}

func NewPostSvrClient(cc *grpc.ClientConn) PostSvrClient {
	return &postSvrClient{cc}
}

func (c *postSvrClient) CreateStream(ctx context.Context, opts ...grpc.CallOption) (PostSvr_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PostSvr_serviceDesc.Streams[0], "/common.postSvr/createStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &postSvrCreateStreamClient{stream}
	return x, nil
}

type PostSvr_CreateStreamClient interface {
	Send(*PostReq) error
	Recv() (*PostRsp, error)
	grpc.ClientStream
}

type postSvrCreateStreamClient struct {
	grpc.ClientStream
}

func (x *postSvrCreateStreamClient) Send(m *PostReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *postSvrCreateStreamClient) Recv() (*PostRsp, error) {
	m := new(PostRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *postSvrClient) CheckAvail(ctx context.Context, in *CheckAvailReq, opts ...grpc.CallOption) (*CheckAvailRsp, error) {
	out := new(CheckAvailRsp)
	err := c.cc.Invoke(ctx, "/common.postSvr/CheckAvail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostSvrServer is the server API for PostSvr service.
type PostSvrServer interface {
	//建立双向stream，后续req和rsp通过此通道传送
	CreateStream(PostSvr_CreateStreamServer) error
	//探测Svr是否正常。SvrMng用，客户端无需调用
	CheckAvail(context.Context, *CheckAvailReq) (*CheckAvailRsp, error)
}

// UnimplementedPostSvrServer can be embedded to have forward compatible implementations.
type UnimplementedPostSvrServer struct {
}

func (*UnimplementedPostSvrServer) CreateStream(srv PostSvr_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedPostSvrServer) CheckAvail(ctx context.Context, req *CheckAvailReq) (*CheckAvailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvail not implemented")
}

func RegisterPostSvrServer(s *grpc.Server, srv PostSvrServer) {
	s.RegisterService(&_PostSvr_serviceDesc, srv)
}

func _PostSvr_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PostSvrServer).CreateStream(&postSvrCreateStreamServer{stream})
}

type PostSvr_CreateStreamServer interface {
	Send(*PostRsp) error
	Recv() (*PostReq, error)
	grpc.ServerStream
}

type postSvrCreateStreamServer struct {
	grpc.ServerStream
}

func (x *postSvrCreateStreamServer) Send(m *PostRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *postSvrCreateStreamServer) Recv() (*PostReq, error) {
	m := new(PostReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PostSvr_CheckAvail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostSvrServer).CheckAvail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.postSvr/CheckAvail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostSvrServer).CheckAvail(ctx, req.(*CheckAvailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.postSvr",
	HandlerType: (*PostSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvail",
			Handler:    _PostSvr_CheckAvail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "createStream",
			Handler:       _PostSvr_CreateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}

// MsgIdGeneratorClient is the client API for MsgIdGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgIdGeneratorClient interface {
	//获取一个msgId
	GenMsgId(ctx context.Context, in *GenMsgIdReq, opts ...grpc.CallOption) (*GenMsgIdRsp, error)
}

type msgIdGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewMsgIdGeneratorClient(cc *grpc.ClientConn) MsgIdGeneratorClient {
	return &msgIdGeneratorClient{cc}
}

func (c *msgIdGeneratorClient) GenMsgId(ctx context.Context, in *GenMsgIdReq, opts ...grpc.CallOption) (*GenMsgIdRsp, error) {
	out := new(GenMsgIdRsp)
	err := c.cc.Invoke(ctx, "/common.msgIdGenerator/GenMsgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgIdGeneratorServer is the server API for MsgIdGenerator service.
type MsgIdGeneratorServer interface {
	//获取一个msgId
	GenMsgId(context.Context, *GenMsgIdReq) (*GenMsgIdRsp, error)
}

// UnimplementedMsgIdGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedMsgIdGeneratorServer struct {
}

func (*UnimplementedMsgIdGeneratorServer) GenMsgId(ctx context.Context, req *GenMsgIdReq) (*GenMsgIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenMsgId not implemented")
}

func RegisterMsgIdGeneratorServer(s *grpc.Server, srv MsgIdGeneratorServer) {
	s.RegisterService(&_MsgIdGenerator_serviceDesc, srv)
}

func _MsgIdGenerator_GenMsgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgIdGeneratorServer).GenMsgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.msgIdGenerator/GenMsgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgIdGeneratorServer).GenMsgId(ctx, req.(*GenMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgIdGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.msgIdGenerator",
	HandlerType: (*MsgIdGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenMsgId",
			Handler:    _MsgIdGenerator_GenMsgId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// FollowSvrClient is the client API for FollowSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FollowSvrClient interface {
	QueryFollowList(ctx context.Context, in *QueryFollowListReq, opts ...grpc.CallOption) (*QueryFollowListRsp, error)
	//关注
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRsp, error)
	//取关
	UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowRsp, error)
}

type followSvrClient struct {
	cc *grpc.ClientConn
}

func NewFollowSvrClient(cc *grpc.ClientConn) FollowSvrClient {
	return &followSvrClient{cc}
}

func (c *followSvrClient) QueryFollowList(ctx context.Context, in *QueryFollowListReq, opts ...grpc.CallOption) (*QueryFollowListRsp, error) {
	out := new(QueryFollowListRsp)
	err := c.cc.Invoke(ctx, "/common.followSvr/QueryFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followSvrClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRsp, error) {
	out := new(FollowRsp)
	err := c.cc.Invoke(ctx, "/common.followSvr/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followSvrClient) UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowRsp, error) {
	out := new(UnFollowRsp)
	err := c.cc.Invoke(ctx, "/common.followSvr/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowSvrServer is the server API for FollowSvr service.
type FollowSvrServer interface {
	QueryFollowList(context.Context, *QueryFollowListReq) (*QueryFollowListRsp, error)
	//关注
	Follow(context.Context, *FollowReq) (*FollowRsp, error)
	//取关
	UnFollow(context.Context, *UnFollowReq) (*UnFollowRsp, error)
}

// UnimplementedFollowSvrServer can be embedded to have forward compatible implementations.
type UnimplementedFollowSvrServer struct {
}

func (*UnimplementedFollowSvrServer) QueryFollowList(ctx context.Context, req *QueryFollowListReq) (*QueryFollowListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFollowList not implemented")
}
func (*UnimplementedFollowSvrServer) Follow(ctx context.Context, req *FollowReq) (*FollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedFollowSvrServer) UnFollow(ctx context.Context, req *UnFollowReq) (*UnFollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}

func RegisterFollowSvrServer(s *grpc.Server, srv FollowSvrServer) {
	s.RegisterService(&_FollowSvr_serviceDesc, srv)
}

func _FollowSvr_QueryFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFollowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowSvrServer).QueryFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followSvr/QueryFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowSvrServer).QueryFollowList(ctx, req.(*QueryFollowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowSvr_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowSvrServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followSvr/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowSvrServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowSvr_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowSvrServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followSvr/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowSvrServer).UnFollow(ctx, req.(*UnFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FollowSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.followSvr",
	HandlerType: (*FollowSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryFollowList",
			Handler:    _FollowSvr_QueryFollowList_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _FollowSvr_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _FollowSvr_UnFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// FollowedSvrClient is the client API for FollowedSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FollowedSvrClient interface {
	QueryFollowedList(ctx context.Context, in *QueryFollowedListReq, opts ...grpc.CallOption) (*QueryFollowedListRsp, error)
	QueryOnlineFollowedList(ctx context.Context, in *QueryFollowedListReq, opts ...grpc.CallOption) (*QueryFollowedListRsp, error)
	//userId上线
	Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineRsp, error)
	//userId下线
	Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*OfflineRsp, error)
	//关注
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRsp, error)
	//取关
	UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowRsp, error)
}

type followedSvrClient struct {
	cc *grpc.ClientConn
}

func NewFollowedSvrClient(cc *grpc.ClientConn) FollowedSvrClient {
	return &followedSvrClient{cc}
}

func (c *followedSvrClient) QueryFollowedList(ctx context.Context, in *QueryFollowedListReq, opts ...grpc.CallOption) (*QueryFollowedListRsp, error) {
	out := new(QueryFollowedListRsp)
	err := c.cc.Invoke(ctx, "/common.followedSvr/QueryFollowedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followedSvrClient) QueryOnlineFollowedList(ctx context.Context, in *QueryFollowedListReq, opts ...grpc.CallOption) (*QueryFollowedListRsp, error) {
	out := new(QueryFollowedListRsp)
	err := c.cc.Invoke(ctx, "/common.followedSvr/QueryOnlineFollowedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followedSvrClient) Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineRsp, error) {
	out := new(OnlineRsp)
	err := c.cc.Invoke(ctx, "/common.followedSvr/Online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followedSvrClient) Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*OfflineRsp, error) {
	out := new(OfflineRsp)
	err := c.cc.Invoke(ctx, "/common.followedSvr/Offline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followedSvrClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRsp, error) {
	out := new(FollowRsp)
	err := c.cc.Invoke(ctx, "/common.followedSvr/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followedSvrClient) UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowRsp, error) {
	out := new(UnFollowRsp)
	err := c.cc.Invoke(ctx, "/common.followedSvr/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowedSvrServer is the server API for FollowedSvr service.
type FollowedSvrServer interface {
	QueryFollowedList(context.Context, *QueryFollowedListReq) (*QueryFollowedListRsp, error)
	QueryOnlineFollowedList(context.Context, *QueryFollowedListReq) (*QueryFollowedListRsp, error)
	//userId上线
	Online(context.Context, *OnlineReq) (*OnlineRsp, error)
	//userId下线
	Offline(context.Context, *OfflineReq) (*OfflineRsp, error)
	//关注
	Follow(context.Context, *FollowReq) (*FollowRsp, error)
	//取关
	UnFollow(context.Context, *UnFollowReq) (*UnFollowRsp, error)
}

// UnimplementedFollowedSvrServer can be embedded to have forward compatible implementations.
type UnimplementedFollowedSvrServer struct {
}

func (*UnimplementedFollowedSvrServer) QueryFollowedList(ctx context.Context, req *QueryFollowedListReq) (*QueryFollowedListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFollowedList not implemented")
}
func (*UnimplementedFollowedSvrServer) QueryOnlineFollowedList(ctx context.Context, req *QueryFollowedListReq) (*QueryFollowedListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOnlineFollowedList not implemented")
}
func (*UnimplementedFollowedSvrServer) Online(ctx context.Context, req *OnlineReq) (*OnlineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (*UnimplementedFollowedSvrServer) Offline(ctx context.Context, req *OfflineReq) (*OfflineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (*UnimplementedFollowedSvrServer) Follow(ctx context.Context, req *FollowReq) (*FollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedFollowedSvrServer) UnFollow(ctx context.Context, req *UnFollowReq) (*UnFollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}

func RegisterFollowedSvrServer(s *grpc.Server, srv FollowedSvrServer) {
	s.RegisterService(&_FollowedSvr_serviceDesc, srv)
}

func _FollowedSvr_QueryFollowedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFollowedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowedSvrServer).QueryFollowedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followedSvr/QueryFollowedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowedSvrServer).QueryFollowedList(ctx, req.(*QueryFollowedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowedSvr_QueryOnlineFollowedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFollowedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowedSvrServer).QueryOnlineFollowedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followedSvr/QueryOnlineFollowedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowedSvrServer).QueryOnlineFollowedList(ctx, req.(*QueryFollowedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowedSvr_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowedSvrServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followedSvr/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowedSvrServer).Online(ctx, req.(*OnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowedSvr_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowedSvrServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followedSvr/Offline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowedSvrServer).Offline(ctx, req.(*OfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowedSvr_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowedSvrServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followedSvr/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowedSvrServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowedSvr_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowedSvrServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.followedSvr/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowedSvrServer).UnFollow(ctx, req.(*UnFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FollowedSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.followedSvr",
	HandlerType: (*FollowedSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryFollowedList",
			Handler:    _FollowedSvr_QueryFollowedList_Handler,
		},
		{
			MethodName: "QueryOnlineFollowedList",
			Handler:    _FollowedSvr_QueryOnlineFollowedList_Handler,
		},
		{
			MethodName: "Online",
			Handler:    _FollowedSvr_Online_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _FollowedSvr_Offline_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _FollowedSvr_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _FollowedSvr_UnFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// RelationChangeSvrClient is the client API for RelationChangeSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelationChangeSvrClient interface {
	//关注
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRsp, error)
	//取关
	UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowRsp, error)
}

type relationChangeSvrClient struct {
	cc *grpc.ClientConn
}

func NewRelationChangeSvrClient(cc *grpc.ClientConn) RelationChangeSvrClient {
	return &relationChangeSvrClient{cc}
}

func (c *relationChangeSvrClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRsp, error) {
	out := new(FollowRsp)
	err := c.cc.Invoke(ctx, "/common.relationChangeSvr/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationChangeSvrClient) UnFollow(ctx context.Context, in *UnFollowReq, opts ...grpc.CallOption) (*UnFollowRsp, error) {
	out := new(UnFollowRsp)
	err := c.cc.Invoke(ctx, "/common.relationChangeSvr/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationChangeSvrServer is the server API for RelationChangeSvr service.
type RelationChangeSvrServer interface {
	//关注
	Follow(context.Context, *FollowReq) (*FollowRsp, error)
	//取关
	UnFollow(context.Context, *UnFollowReq) (*UnFollowRsp, error)
}

// UnimplementedRelationChangeSvrServer can be embedded to have forward compatible implementations.
type UnimplementedRelationChangeSvrServer struct {
}

func (*UnimplementedRelationChangeSvrServer) Follow(ctx context.Context, req *FollowReq) (*FollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedRelationChangeSvrServer) UnFollow(ctx context.Context, req *UnFollowReq) (*UnFollowRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}

func RegisterRelationChangeSvrServer(s *grpc.Server, srv RelationChangeSvrServer) {
	s.RegisterService(&_RelationChangeSvr_serviceDesc, srv)
}

func _RelationChangeSvr_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationChangeSvrServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.relationChangeSvr/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationChangeSvrServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationChangeSvr_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationChangeSvrServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.relationChangeSvr/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationChangeSvrServer).UnFollow(ctx, req.(*UnFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelationChangeSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.relationChangeSvr",
	HandlerType: (*RelationChangeSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _RelationChangeSvr_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _RelationChangeSvr_UnFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// UserMsgIdSvrMngClient is the client API for UserMsgIdSvrMng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMsgIdSvrMngClient interface {
	//批量传入userId查询，根据svr分组然后回复
	QueryUserMsgIdSvrAdd(ctx context.Context, in *QueryUserMsgIdSvrAddrReq, opts ...grpc.CallOption) (*QueryUserMsgIdSvrAddrRsp, error)
}

type userMsgIdSvrMngClient struct {
	cc *grpc.ClientConn
}

func NewUserMsgIdSvrMngClient(cc *grpc.ClientConn) UserMsgIdSvrMngClient {
	return &userMsgIdSvrMngClient{cc}
}

func (c *userMsgIdSvrMngClient) QueryUserMsgIdSvrAdd(ctx context.Context, in *QueryUserMsgIdSvrAddrReq, opts ...grpc.CallOption) (*QueryUserMsgIdSvrAddrRsp, error) {
	out := new(QueryUserMsgIdSvrAddrRsp)
	err := c.cc.Invoke(ctx, "/common.userMsgIdSvrMng/QueryUserMsgIdSvrAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMsgIdSvrMngServer is the server API for UserMsgIdSvrMng service.
type UserMsgIdSvrMngServer interface {
	//批量传入userId查询，根据svr分组然后回复
	QueryUserMsgIdSvrAdd(context.Context, *QueryUserMsgIdSvrAddrReq) (*QueryUserMsgIdSvrAddrRsp, error)
}

// UnimplementedUserMsgIdSvrMngServer can be embedded to have forward compatible implementations.
type UnimplementedUserMsgIdSvrMngServer struct {
}

func (*UnimplementedUserMsgIdSvrMngServer) QueryUserMsgIdSvrAdd(ctx context.Context, req *QueryUserMsgIdSvrAddrReq) (*QueryUserMsgIdSvrAddrRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserMsgIdSvrAdd not implemented")
}

func RegisterUserMsgIdSvrMngServer(s *grpc.Server, srv UserMsgIdSvrMngServer) {
	s.RegisterService(&_UserMsgIdSvrMng_serviceDesc, srv)
}

func _UserMsgIdSvrMng_QueryUserMsgIdSvrAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserMsgIdSvrAddrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMsgIdSvrMngServer).QueryUserMsgIdSvrAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.userMsgIdSvrMng/QueryUserMsgIdSvrAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMsgIdSvrMngServer).QueryUserMsgIdSvrAdd(ctx, req.(*QueryUserMsgIdSvrAddrReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMsgIdSvrMng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.userMsgIdSvrMng",
	HandlerType: (*UserMsgIdSvrMngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUserMsgIdSvrAdd",
			Handler:    _UserMsgIdSvrMng_QueryUserMsgIdSvrAdd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// UserMsgIdSvrClient is the client API for UserMsgIdSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserMsgIdSvrClient interface {
	PullMsg(ctx context.Context, in *PullMsgIdReq, opts ...grpc.CallOption) (*PullMsgIdRsp, error)
	PostMsg(ctx context.Context, in *PostMsgIdReq, opts ...grpc.CallOption) (*PostMsgIdRsp, error)
	DeleteMsg(ctx context.Context, in *DeleteMsgReq, opts ...grpc.CallOption) (*DeleteMsgRsp, error)
}

type userMsgIdSvrClient struct {
	cc *grpc.ClientConn
}

func NewUserMsgIdSvrClient(cc *grpc.ClientConn) UserMsgIdSvrClient {
	return &userMsgIdSvrClient{cc}
}

func (c *userMsgIdSvrClient) PullMsg(ctx context.Context, in *PullMsgIdReq, opts ...grpc.CallOption) (*PullMsgIdRsp, error) {
	out := new(PullMsgIdRsp)
	err := c.cc.Invoke(ctx, "/common.userMsgIdSvr/PullMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMsgIdSvrClient) PostMsg(ctx context.Context, in *PostMsgIdReq, opts ...grpc.CallOption) (*PostMsgIdRsp, error) {
	out := new(PostMsgIdRsp)
	err := c.cc.Invoke(ctx, "/common.userMsgIdSvr/PostMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMsgIdSvrClient) DeleteMsg(ctx context.Context, in *DeleteMsgReq, opts ...grpc.CallOption) (*DeleteMsgRsp, error) {
	out := new(DeleteMsgRsp)
	err := c.cc.Invoke(ctx, "/common.userMsgIdSvr/DeleteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMsgIdSvrServer is the server API for UserMsgIdSvr service.
type UserMsgIdSvrServer interface {
	PullMsg(context.Context, *PullMsgIdReq) (*PullMsgIdRsp, error)
	PostMsg(context.Context, *PostMsgIdReq) (*PostMsgIdRsp, error)
	DeleteMsg(context.Context, *DeleteMsgReq) (*DeleteMsgRsp, error)
}

// UnimplementedUserMsgIdSvrServer can be embedded to have forward compatible implementations.
type UnimplementedUserMsgIdSvrServer struct {
}

func (*UnimplementedUserMsgIdSvrServer) PullMsg(ctx context.Context, req *PullMsgIdReq) (*PullMsgIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMsg not implemented")
}
func (*UnimplementedUserMsgIdSvrServer) PostMsg(ctx context.Context, req *PostMsgIdReq) (*PostMsgIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMsg not implemented")
}
func (*UnimplementedUserMsgIdSvrServer) DeleteMsg(ctx context.Context, req *DeleteMsgReq) (*DeleteMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsg not implemented")
}

func RegisterUserMsgIdSvrServer(s *grpc.Server, srv UserMsgIdSvrServer) {
	s.RegisterService(&_UserMsgIdSvr_serviceDesc, srv)
}

func _UserMsgIdSvr_PullMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMsgIdSvrServer).PullMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.userMsgIdSvr/PullMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMsgIdSvrServer).PullMsg(ctx, req.(*PullMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMsgIdSvr_PostMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMsgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMsgIdSvrServer).PostMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.userMsgIdSvr/PostMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMsgIdSvrServer).PostMsg(ctx, req.(*PostMsgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMsgIdSvr_DeleteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMsgIdSvrServer).DeleteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.userMsgIdSvr/DeleteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMsgIdSvrServer).DeleteMsg(ctx, req.(*DeleteMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserMsgIdSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.userMsgIdSvr",
	HandlerType: (*UserMsgIdSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullMsg",
			Handler:    _UserMsgIdSvr_PullMsg_Handler,
		},
		{
			MethodName: "PostMsg",
			Handler:    _UserMsgIdSvr_PostMsg_Handler,
		},
		{
			MethodName: "DeleteMsg",
			Handler:    _UserMsgIdSvr_DeleteMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// ContentSvrClient is the client API for ContentSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentSvrClient interface {
	PullMsg(ctx context.Context, in *PullMsgContentReq, opts ...grpc.CallOption) (*PullMsgContentRsp, error)
	PostMsg(ctx context.Context, in *PostMsgContentReq, opts ...grpc.CallOption) (*PostMsgContentRsp, error)
	DeleteMsg(ctx context.Context, in *DeleteMsgReq, opts ...grpc.CallOption) (*DeleteMsgRsp, error)
}

type contentSvrClient struct {
	cc *grpc.ClientConn
}

func NewContentSvrClient(cc *grpc.ClientConn) ContentSvrClient {
	return &contentSvrClient{cc}
}

func (c *contentSvrClient) PullMsg(ctx context.Context, in *PullMsgContentReq, opts ...grpc.CallOption) (*PullMsgContentRsp, error) {
	out := new(PullMsgContentRsp)
	err := c.cc.Invoke(ctx, "/common.contentSvr/PullMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentSvrClient) PostMsg(ctx context.Context, in *PostMsgContentReq, opts ...grpc.CallOption) (*PostMsgContentRsp, error) {
	out := new(PostMsgContentRsp)
	err := c.cc.Invoke(ctx, "/common.contentSvr/PostMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentSvrClient) DeleteMsg(ctx context.Context, in *DeleteMsgReq, opts ...grpc.CallOption) (*DeleteMsgRsp, error) {
	out := new(DeleteMsgRsp)
	err := c.cc.Invoke(ctx, "/common.contentSvr/DeleteMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentSvrServer is the server API for ContentSvr service.
type ContentSvrServer interface {
	PullMsg(context.Context, *PullMsgContentReq) (*PullMsgContentRsp, error)
	PostMsg(context.Context, *PostMsgContentReq) (*PostMsgContentRsp, error)
	DeleteMsg(context.Context, *DeleteMsgReq) (*DeleteMsgRsp, error)
}

// UnimplementedContentSvrServer can be embedded to have forward compatible implementations.
type UnimplementedContentSvrServer struct {
}

func (*UnimplementedContentSvrServer) PullMsg(ctx context.Context, req *PullMsgContentReq) (*PullMsgContentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMsg not implemented")
}
func (*UnimplementedContentSvrServer) PostMsg(ctx context.Context, req *PostMsgContentReq) (*PostMsgContentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMsg not implemented")
}
func (*UnimplementedContentSvrServer) DeleteMsg(ctx context.Context, req *DeleteMsgReq) (*DeleteMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMsg not implemented")
}

func RegisterContentSvrServer(s *grpc.Server, srv ContentSvrServer) {
	s.RegisterService(&_ContentSvr_serviceDesc, srv)
}

func _ContentSvr_PullMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMsgContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentSvrServer).PullMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.contentSvr/PullMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentSvrServer).PullMsg(ctx, req.(*PullMsgContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentSvr_PostMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMsgContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentSvrServer).PostMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.contentSvr/PostMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentSvrServer).PostMsg(ctx, req.(*PostMsgContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentSvr_DeleteMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentSvrServer).DeleteMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.contentSvr/DeleteMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentSvrServer).DeleteMsg(ctx, req.(*DeleteMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.contentSvr",
	HandlerType: (*ContentSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullMsg",
			Handler:    _ContentSvr_PullMsg_Handler,
		},
		{
			MethodName: "PostMsg",
			Handler:    _ContentSvr_PostMsg_Handler,
		},
		{
			MethodName: "DeleteMsg",
			Handler:    _ContentSvr_DeleteMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// PushSvrClient is the client API for PushSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushSvrClient interface {
	//for PostSvr
	//    //PostSvr建立客户端流式stream，发送push
	//    rpc CreatePushStream(stream PushReq) returns (PushByeRsp) {}
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushRsp, error)
	//for frontNotifySvr
	//userId上线
	Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineRsp, error)
	//userId下线
	Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*OfflineRsp, error)
	//frontNotifySvr建立服务端流式stream，接收notify
	CreateNotifyStream(ctx context.Context, in *CreateNotifyStreamReq, opts ...grpc.CallOption) (PushSvr_CreateNotifyStreamClient, error)
}

type pushSvrClient struct {
	cc *grpc.ClientConn
}

func NewPushSvrClient(cc *grpc.ClientConn) PushSvrClient {
	return &pushSvrClient{cc}
}

func (c *pushSvrClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushRsp, error) {
	out := new(PushRsp)
	err := c.cc.Invoke(ctx, "/common.pushSvr/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSvrClient) Online(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineRsp, error) {
	out := new(OnlineRsp)
	err := c.cc.Invoke(ctx, "/common.pushSvr/Online", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSvrClient) Offline(ctx context.Context, in *OfflineReq, opts ...grpc.CallOption) (*OfflineRsp, error) {
	out := new(OfflineRsp)
	err := c.cc.Invoke(ctx, "/common.pushSvr/Offline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushSvrClient) CreateNotifyStream(ctx context.Context, in *CreateNotifyStreamReq, opts ...grpc.CallOption) (PushSvr_CreateNotifyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushSvr_serviceDesc.Streams[0], "/common.pushSvr/CreateNotifyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushSvrCreateNotifyStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushSvr_CreateNotifyStreamClient interface {
	Recv() (*Notify, error)
	grpc.ClientStream
}

type pushSvrCreateNotifyStreamClient struct {
	grpc.ClientStream
}

func (x *pushSvrCreateNotifyStreamClient) Recv() (*Notify, error) {
	m := new(Notify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushSvrServer is the server API for PushSvr service.
type PushSvrServer interface {
	//for PostSvr
	//    //PostSvr建立客户端流式stream，发送push
	//    rpc CreatePushStream(stream PushReq) returns (PushByeRsp) {}
	Push(context.Context, *PushReq) (*PushRsp, error)
	//for frontNotifySvr
	//userId上线
	Online(context.Context, *OnlineReq) (*OnlineRsp, error)
	//userId下线
	Offline(context.Context, *OfflineReq) (*OfflineRsp, error)
	//frontNotifySvr建立服务端流式stream，接收notify
	CreateNotifyStream(*CreateNotifyStreamReq, PushSvr_CreateNotifyStreamServer) error
}

// UnimplementedPushSvrServer can be embedded to have forward compatible implementations.
type UnimplementedPushSvrServer struct {
}

func (*UnimplementedPushSvrServer) Push(ctx context.Context, req *PushReq) (*PushRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedPushSvrServer) Online(ctx context.Context, req *OnlineReq) (*OnlineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Online not implemented")
}
func (*UnimplementedPushSvrServer) Offline(ctx context.Context, req *OfflineReq) (*OfflineRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (*UnimplementedPushSvrServer) CreateNotifyStream(req *CreateNotifyStreamReq, srv PushSvr_CreateNotifyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateNotifyStream not implemented")
}

func RegisterPushSvrServer(s *grpc.Server, srv PushSvrServer) {
	s.RegisterService(&_PushSvr_serviceDesc, srv)
}

func _PushSvr_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushSvrServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.pushSvr/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushSvrServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushSvr_Online_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushSvrServer).Online(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.pushSvr/Online",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushSvrServer).Online(ctx, req.(*OnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushSvr_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushSvrServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.pushSvr/Offline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushSvrServer).Offline(ctx, req.(*OfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushSvr_CreateNotifyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateNotifyStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushSvrServer).CreateNotifyStream(m, &pushSvrCreateNotifyStreamServer{stream})
}

type PushSvr_CreateNotifyStreamServer interface {
	Send(*Notify) error
	grpc.ServerStream
}

type pushSvrCreateNotifyStreamServer struct {
	grpc.ServerStream
}

func (x *pushSvrCreateNotifyStreamServer) Send(m *Notify) error {
	return x.ServerStream.SendMsg(m)
}

var _PushSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.pushSvr",
	HandlerType: (*PushSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _PushSvr_Push_Handler,
		},
		{
			MethodName: "Online",
			Handler:    _PushSvr_Online_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _PushSvr_Offline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateNotifyStream",
			Handler:       _PushSvr_CreateNotifyStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "common.proto",
}
